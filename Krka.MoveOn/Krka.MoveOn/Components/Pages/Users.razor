@page "/users"

@using Krka.MoveOn.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager

@attribute [Authorize(Roles = "Admin")]
@attribute [StreamRendering(true)]
@rendermode InteractiveServer

<PageTitle>Používatelia</PageTitle>
<h3>Používatelia</h3>

@if (users == null)
{
    <p><em>Načítavanie...</em></p>
}
else
{
    <DxGrid @ref="usersGrid" Data="@users" CssClass="mw-1100"
            PageSize="20"
            PagerPosition="GridPagerPosition.Bottom"
            PageSizeSelectorVisible="true"
            PageSizeSelectorItems="@(new int[] { 10, 20, 100 })"
            PageSizeSelectorAllRowsItemVisible="true"
            PagerSwitchToInputBoxButtonCount="10"
            PagerVisibleNumericButtonCount="10"
            ValidationEnabled="true"
            EditMode="GridEditMode.EditCell"
            FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
            ColumnResizeMode="GridColumnResizeMode.NextColumn"
            TextWrapEnabled="false"
            HighlightRowOnHover="true">
        <ToolbarTemplate Context="toolbarContext">
            <DxToolbar ItemRenderStyleMode="ToolbarRenderStyleMode.Plain">
                <DxToolbarItem Text="Pridať používateľa" Click="New_Click" Enabled="true">
                    <img src="images/newPatient.svg" width="24" height="24" alt="Pridať" />
                    <span style="margin-left: 2px">Pridať používateľa</span>
                </DxToolbarItem>
                <DxToolbarItem Text="Uložiť" Click="Save_Click" IconCssClass="grid-toolbar-save" Enabled="BatchItemsEnabled" BeginGroup="true">
                    <img src="images/save.svg" width="22" height="22" alt="Uložiť" />
                    <span style="margin-left: 2px">Uložiť</span>
                </DxToolbarItem>

                <DxToolbarItem Text="Zrušiť" Click="Cancel_Click" IconCssClass="grid-toolbar-cancel" Enabled="BatchItemsEnabled">
                    <img src="images/cancel.svg" width="22" height="22" alt="Zrušiť" />
                    <span style="margin-left: 2px">Zrušiť</span>
                </DxToolbarItem>
            </DxToolbar>
            </ToolbarTemplate>
        <Columns>
            <DxGridDataColumn Caption="Používateľ" FieldName="FullName" />
            @* <DxGridDataColumn Caption="Úroveň">
                <CellDisplayTemplate>
                    @{
                        var user = (ApplicationUser)((GridDataColumnCellDisplayTemplateContext)context).DataItem;
                        bool isEditing = editingRoles.Contains(user.Id);
                    }
                    @if (isEditing)
                    {
                        <DxComboBox Data="@roles" TextField="@nameof(IdentityRole.Name)" ValueField="@nameof(IdentityRole.Name)"
                        Value="@(userRoles[user.Id])"
                        @onchange="(e) => ChangeUserRole(user, e.Value?.ToString())">
                        </DxComboBox>
                    }
                    else
                    {
                        <span @onclick="() => StartEditRole(user.Id)">@userRoles[user.Id]</span>
                    }
                </CellDisplayTemplate>
            </DxGridDataColumn> *@
            <DxGridDataColumn Caption="Úroveň" FieldName="Role">
                <EditSettings>
                    <DxComboBoxSettings Data="@roles"/>
                </EditSettings>
            </DxGridDataColumn>
            <DxGridDataColumn Caption="E-mail" FieldName="Email" />
            <DxGridDataColumn Caption="Telefón" FieldName="PhoneNumber" />
            <DxGridCommandColumn Width="100px" NewButtonVisible="false">
                <CellDisplayTemplate Context="gridContext">
                    <div class="grid-cell-align-center">
                        <DxButton IconCssClass="grid-icon grid-icon-delete"
                                  RenderStyle="ButtonRenderStyle.Link"
                                  aria-label="Delete"
                                  Click="@(() => usersGrid!.ShowRowDeleteConfirmation(gridContext.VisibleIndex))">
                            <img src="images/delete.svg" width="16" height="16" alt="Vymazať" />
                        </DxButton>
                        <DxButton IconCssClass="grid-icon grid-icon-delete"
                                  RenderStyle="ButtonRenderStyle.Link"
                                  aria-label="Delete"
                                  Click="@(() => usersGrid!.ShowRowDeleteConfirmation(gridContext.VisibleIndex))">
                            <img src="images/delete.svg" width="16" height="16" alt="Vymazať" />
                        </DxButton>
                    </div>
                </CellDisplayTemplate>
                <CellEditTemplate Context="editContext">
                    <div class="grid-cell-align-center">
                        <DxButton Enabled="false"
                                  aria-label="Delete"
                                  CssClass="grid-disabled-button"
                                  IconCssClass="grid-icon grid-icon-delete"
                                  RenderStyle="ButtonRenderStyle.Link" />
                    </div>
                </CellEditTemplate>
            </DxGridCommandColumn>
        </Columns>
    </DxGrid>
}

@code {
    private IGrid? usersGrid { get; set; }
    private ApplicationUser[]? users;
    private List<IdentityRole> roles = new();
    private Dictionary<string, string?> userRoles = new Dictionary<string, string?>(); // UserID to Role mapping
    private Dictionary<string, string?> updatedRoles = new Dictionary<string, string?>(); // Store updated roles temporarily
    private HashSet<string> editingRoles = new HashSet<string>(); // Keeps track of which users are in editing mode

    private Dictionary<ApplicationUser, DataChange> UnsavedChanges { get; } = new();
    private bool BatchItemsEnabled => UnsavedChanges.Count > 0 || usersGrid!.IsEditing();

    protected override async Task OnInitializedAsync()
    {
        users = await UserManager.Users.ToArrayAsync();
        roles = await RoleManager.Roles.ToListAsync();
        foreach (var user in users)
        {
            var roles = await UserManager.GetRolesAsync(user);
            user.Role = roles.FirstOrDefault();
            userRoles[user.Id] = roles.FirstOrDefault();
        }

        // var tasks = users.Select(async user =>
        // {
        // });
        // await Task.WhenAll(tasks);
    }
    private void StartEditRole(string userId)
    {
        editingRoles.Add(userId); // Enable editing mode for this user
    }
    private void ChangeUserRole(ApplicationUser user, string? newRole)
    {
        updatedRoles[user.Id] = newRole; // Store the updated role temporarily
        editingRoles.Remove(user.Id); // Exit editing mode for this user
    }




    async Task New_Click() => await usersGrid!.StartEditNewRowAsync();
    async Task Cancel_Click() => await ClearUnsavedChangesAsync();
    async Task Save_Click()
    {
        foreach (var unsavedChange in UnsavedChanges)
        {
            var changedItem = unsavedChange.Key;
            var changeType = unsavedChange.Value.Type;
            // var dataItem = await FindDataItem(changedItem);
            // switch (changeType)
            // {
            //     case DataChangeType.Addition:
            //         await PatientService.InsertEmployeeAsync(changedItem);
            //         break;
            //     case DataChangeType.Delete:
            //         await PatientService.RemoveEmployeeAsync(dataItem);
            //         break;
            //     case DataChangeType.Modification:
            //         await PatientService.UpdateEmployeeAsync(dataItem, changedItem);
            //         break;
            // }
        }
        await ClearUnsavedChangesAsync();
    }
    async Task ClearUnsavedChangesAsync()
    {
        UnsavedChanges.Clear();
        // await UpdateDataAsync();
    }
    record DataChange(DataChangeType Type, HashSet<string> ChangedFields);
    enum DataChangeType { Modification, Addition, Delete }
}
