@using Krka.MoveOn.Data.Questionnaires
@using Krka.MoveOn.Services
@using Krka.MoveOn.Services.Questionnaires
@using Krka.MoveOn.Components.Pages.Patient.OngoingQuestionnaire.Components
@using Krka.MoveOn.Components.Pages.Components

@attribute [StreamRendering(true)]
@rendermode InteractiveServer

@inject Treatment03Service TreatmentService
@inject IToastNotificationService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<EditForm Model="@treat03"
          Context="EditFormContext"
          OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <DxFormLayout>
        <DxFormLayoutGroup Caption="Zmena v liečbe pridružených problémov (napr. obstipácia, depresia, kognitívne poruchy atď.):" ColSpanMd="12" CaptionCssClass="caption-styleH0">
            <DxFormLayoutItem Caption="Ak áno, prosím vyplňte tabuľku" ColSpanMd="6" CaptionPosition="CaptionPosition.Vertical" CaptionCssClass="caption-styleH1">
                <InputRadioGroup @bind-Value="@treat03!.TreatQ1" class="d-flex flex-wrap">
                    @foreach (var item in treat_q_1_Answer)
                    {
                        <label class="d-block m-2">
                            <InputRadio class="m-2" @onclick="async() => await OnTreatQAnswer(item.Id)" Value="@item.Id" required Disabled="@isReadOnly" />@item.Name
                        </label>
                    }
                </InputRadioGroup>
                <ValidationMessage For="@(() => treat03!.TreatQ1)" />
            </DxFormLayoutItem>

            @if (isTreatQ1Answer)
            {
                <div style="width: 98%; margin-left: 15px;">
                    <DxGrid @ref="treatGrid"
                            Data="Treats"
                            PageSize="20"
                            PagerPosition="GridPagerPosition.Bottom"
                            PageSizeSelectorVisible="true"
                            PageSizeSelectorItems="@(new int[] { 10, 20, 100 })"
                            PageSizeSelectorAllRowsItemVisible="true"
                            PagerSwitchToInputBoxButtonCount="10"
                            PagerVisibleNumericButtonCount="10"
                            PopupEditFormHeaderText="Učinná látka"
                            KeyFieldName="Id"
                            ValidationEnabled="false"
                            EditMode="GridEditMode.PopupEditForm"
                            FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                            ColumnResizeMode="GridColumnResizeMode.NextColumn"
                            TextWrapEnabled="false"
                            EditModelSaving="Grid_EditModelSaving"
                            DataItemDeleting="Grid_DataItemDeleting"
                            HighlightRowOnHover="true"
                            FocusedRowEnabled="true">

                        <ToolbarTemplate Context="toolbarContext">
                            @if (!isReadOnly)
                            {
                                <ManagementToolbarOnlyAdd NewClick="New_Click" BatchItemsEnabled="@BatchItemsEnabled" />
                            }
                        </ToolbarTemplate>

                        <Columns>
                            <DxGridDataColumn FieldName="Treat_3" Caption="Indikácia" ReadOnly="@isReadOnly" DataRowEditorVisible="@(!isReadOnly)">
                                <EditSettings>
                                    <DxComboBoxSettings Data="@treat_3_Answer" ValueFieldName="Id" TextFieldName="Name" />
                                </EditSettings>
                            </DxGridDataColumn>

                            <DxGridDataColumn FieldName="Treat_1" Caption="Učinná látka" Width="" ReadOnly="@isReadOnly" DataRowEditorVisible="@(!isReadOnly)">
                                <EditSettings>
                                    <DxComboBoxSettings Data="@treat_1_Answer" ValueFieldName="Id" TextFieldName="Name" />
                                </EditSettings>
                            </DxGridDataColumn>

                            <DxGridDataColumn FieldName="Treat_2" Caption="Dávka (mg)" ReadOnly="@isReadOnly" DataRowEditorVisible="@(!isReadOnly)">
                                <EditSettings>
                                    <DxSpinEditSettings MinValue="@(0m)" />
                                </EditSettings>
                            </DxGridDataColumn>

                            <DxGridDataColumn FieldName="OtherIndication" Caption="Iná indikácia" Visible="false" DataRowEditorVisible="@(!isReadOnly)">
                                <EditSettings>
                                    <DxTextBoxSettings NullText="Napíšte inú indikáciu..." />
                                </EditSettings>
                            </DxGridDataColumn>

                            <DxGridDataColumn FieldName="OtherTreat" Caption="Iná učinná látka" Visible="false" DataRowEditorVisible="@(!isReadOnly)">
                                <EditSettings>
                                    <DxTextBoxSettings NullText="Napíšte inú učinnú látku..." />
                                </EditSettings>
                            </DxGridDataColumn>

                            <DxGridDataColumn FieldName="Id" AllowSort="false" Width="90px" MinWidth="100" TextAlignment="GridTextAlignment.Center">
                                <CellDisplayTemplate Context="context">
                                    @if (context.DataItem is Data.Questionnaires.QuestionnaireTreatment03 treatment)
                                    {
                                        <DxButton IconCssClass="grid-toolbar-info" @onclick="() => ShowDetails(treatment)" />
                                    }
                                </CellDisplayTemplate>
                                <HeaderCaptionTemplate>
                                    <span>Detaily</span>
                                </HeaderCaptionTemplate>
                            </DxGridDataColumn>

                            @if (!isReadOnly)
                            {
                                <DxGridCommandColumn Width="80px" NewButtonVisible="false">

                                    <CellDisplayTemplate Context="gridContext">

                                        <div class="grid-cell-align-center">
                                            <DxButton IconCssClass="grid-icon grid-icon-edit"
                                                      RenderStyle="ButtonRenderStyle.Link"
                                                      title="Upraviť"
                                                      Click="@(() => OnEditButtonClick((Data.Questionnaires.QuestionnaireTreatment03)gridContext.DataItem))" />

                                            <DxButton IconCssClass="grid-icon grid-icon-delete"
                                                      RenderStyle="ButtonRenderStyle.Link"
                                                      title="Vymazať"
                                                      Click="@(() => treatGrid!.ShowRowDeleteConfirmation(gridContext.VisibleIndex))" />
                                        </div>
                                    </CellDisplayTemplate>
                                </DxGridCommandColumn>
                            }
                        </Columns>

                        <EditFormTemplate Context="EditFormContext12">
                            @{
                                var treat = (Data.Questionnaires.QuestionnaireTreatment03)EditFormContext12.EditModel;
                            }
                            <DxFormLayout CssClass="w-100">
                                <DxFormLayoutItem Caption="Indikácia:" ColSpanMd="12">
                                    <DxComboBox Value="treat.Treat_3"
                                                Data="@treat_3_Answer"
                                                ValueFieldName="Id"
                                                TextFieldName="Name"
                                                ValueChanged="(int? newCellValue) => {treat.Treat_3 = newCellValue; UpdateTreat1Answers(newCellValue);}">
                                    </DxComboBox>
                                </DxFormLayoutItem>

                                @if (ShowOtherInput)
                                {
                                    <DxFormLayoutItem Caption="Iná indikácia:" ColSpanMd="12">
                                        @EditFormContext12.GetEditor("OtherIndication")
                                    </DxFormLayoutItem>
                                }

                                @if (!ShowOtherInput)
                                {
                                    <DxFormLayoutItem Caption="Učinná látka" ColSpanMd="12">
                                        <DxComboBox Value="treat.Treat_1"
                                                    Data="@treat_1_Answer"
                                                    ValueFieldName="Id"
                                                    TextFieldName="Name"
                                                    ValueChanged="(int? newCellValue) => {treat.Treat_1 = newCellValue; OnTreat1Changed(newCellValue); }">
                                        </DxComboBox>
                                    </DxFormLayoutItem>

                                }


                                @if (ShowOtherInput1 || ShowOtherInput)
                                {
                                    <DxFormLayoutItem Caption="Iná učinná látka:" ColSpanMd="12">
                                        @EditFormContext12.GetEditor("OtherTreat")
                                    </DxFormLayoutItem>
                                }

                                <DxFormLayoutItem Caption="Dávka (mg):" ColSpanMd="12">
                                    @EditFormContext12.GetEditor("Treat_2")
                                </DxFormLayoutItem>
                            </DxFormLayout>
                        </EditFormTemplate>
                    </DxGrid>

                    <DxPopup @bind-Visible="@PopupVisible"
                             HeaderText="@PopupHeaderText"
                             HorizontalAlignment="HorizontalAlignment.Center"
                             VerticalAlignment="VerticalAlignment.Center"
                             CloseOnEscape="true"
                             CloseOnOutsideClick="true">
                        <div style="padding: 10px;">
                            <p><strong>Iná indikácia:</strong> @PopupOtherIndication</p>
                            <p><strong>Iná účinná látka:</strong> @PopupOtherTreat</p>
                        </div>
                    </DxPopup>
                </div>
            }
        </DxFormLayoutGroup>
    </DxFormLayout>
</EditForm>

@code {
    [Parameter]
    public string? questionnaireId { get; set; }

    [Parameter]
    public EventCallback<(int PreviousProgress, int CurrentProgress)> OnSave { get; set; }

    bool IsInfoOpen = true;
    bool isTreatQ1Answer = false;
    bool isReadOnly = false;
    bool BatchItemsEnabled => UnsavedChanges.Count > 0 || treatGrid!.IsEditing();

    private bool ShowOtherInput { get; set; } = false;
    private bool ShowOtherInput1 { get; set; } = false;
    private bool PopupVisible { get; set; } = false;

    private int previousProgress = 0;
    private int? SelectedTreat3Id { get; set; }
    private int? SelectedTreat1 { get; set; }

    private string PopupHeaderText { get; set; } = "Details";
    private string PopupOtherTreat { get; set; } = string.Empty;
    private string PopupOtherIndication { get; set; } = string.Empty;


    IGrid? treatGrid { get; set; }

    Data.Questionnaires.QuestionnaireTreatment03? treat03;
    List<Data.Questionnaires.QuestionnaireTreatment03>? Treats { get; set; }

    List<Data.Dials.DialActiveIngredient> dialActiveIngredient = new();
    List<Data.Dials.DialActiveIngredient> treat_1_Answer = new();

    List<Data.Dials.DialIndication> dialIndication = new();
    List<Data.Dials.DialIndication> treat_3_Answer = new();

    List<Data.Dials.DialQGeneral> dialQGenerals = new();
    List<Data.Dials.DialQGeneral> treat_q_1_Answer = new();

    Dictionary<QuestionnaireTreatment03, DataChange> UnsavedChanges { get; } = new();

    private void ShowDetails(QuestionnaireTreatment03 treatment)
    {
        if (treatment != null)
        {
            PopupVisible = true;
            PopupHeaderText = $"Detail záznamu";
            PopupOtherTreat = treatment.OtherTreat ?? "N/A";
            PopupOtherIndication = treatment.OtherIndication ?? "N/A";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.IsInRole("Office"))
        {
            isReadOnly = true;
        }

        treat03 = new Data.Questionnaires.QuestionnaireTreatment03
            {
                Questionnaire_id = questionnaireId!,
                CreatedAt = DateTime.Now,
                ModifiedAt = DateTime.Now
            };

        Treats = await TreatmentService.GetQuestionnaireTreatment03(questionnaireId!);

        previousProgress = Treats.Count > 0 ? 100 : 0;

        dialActiveIngredient = await TreatmentService.GetDialActiveIngredientAsync();
        treat_1_Answer = dialActiveIngredient.Where(d => d.Type_q == 2).OrderBy(d => d.Name == "Iné..." ? 1 : 0).ThenBy(d => d.Name).ToList();

        dialIndication = await TreatmentService.GetDialIndicationAsync();
        treat_3_Answer = dialIndication.Where(d => d.Type_q == 1).OrderBy(d => d.Name == "Iné..." ? 1 : 0).ThenBy(d => d.Name).ToList();

        dialQGenerals = await TreatmentService.GetDialGeneralAsync();
        treat_q_1_Answer = dialQGenerals.Where(d => d.Type_q == 5).ToList();

        await LoadQuestionnaire(questionnaireId!);
    }

    private async Task LoadQuestionnaire(string questionnaireid)
    {
        var questionnaire = await TreatmentService.GetQuestionnaireTreatment03ByQuestionnaireIdAsync(questionnaireid);
        if (questionnaire != null)
        {
            treat03 = questionnaire;

            isTreatQ1Answer = (treat03.TreatQ1 == 14);
        }
    }

    async Task New_Click() => await treatGrid!.StartEditNewRowAsync();

    private async Task HandleValidSubmit()
    {
        if (!isReadOnly)
        {
            if (treat03?.TreatQ1 == 14 && treat03.Treat_3 == null)
                return;
            await TreatmentService.SaveTreatmentAsync(treat03!);

            if (OnSave.HasDelegate)
            {
                await OnSave.InvokeAsync((previousProgress, 100));
            }
            previousProgress = Treats.Count > 0 ? 100 : 0;

            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
            Add1Toast();
        }
    }

    async Task OnTreatQAnswer(int value)
    {
        treat03!.TreatQ1 = value;
        isTreatQ1Answer = (treat03!.TreatQ1 == 14);

        if (treat03!.TreatQ1 == 15)
        {
            await HandleValidSubmit();
        }
    }

    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        var treat = (Data.Questionnaires.QuestionnaireTreatment03)e.EditModel;
        var dataItem = (Data.Questionnaires.QuestionnaireTreatment03)e.DataItem;
        treat.Questionnaire_id = questionnaireId!;

        if (treat?.Treat_3 == null)
        {
            return;
        }
        if (e.IsNew)
        {
            Treats!.Add(treat);
            UnsavedChanges[treat] = new(DataChangeType.Addition, new());
        }
        else
        {
            var changedFields = DataUtils.ApplyModifiedFields(treat, dataItem);
            if (changedFields.Count > 0)
            {
                if (UnsavedChanges.TryGetValue(dataItem, out var changes))
                    changes.ChangedFields.UnionWith(changedFields);
                else
                    UnsavedChanges.Add(dataItem, new(DataChangeType.Modification, changedFields));
            }
        }

        foreach (var unsavedChange in UnsavedChanges)
        {
            var changedItem = unsavedChange.Key;
            var changeType = unsavedChange.Value.Type;
            switch (changeType)
            {
                case DataChangeType.Addition:
                    await TreatmentService.SaveTreatmentAsync(changedItem);
                    AddToast();
                    break;
                case DataChangeType.Modification:
                    await TreatmentService.SaveTreatmentAsync(changedItem);
                    ModifyToast();
                    break;
            }
        }

        if (OnSave.HasDelegate)
        {
            await OnSave.InvokeAsync((previousProgress, 100));
        }
        previousProgress = Treats.Count > 0 ? 100 : 0;

        await ClearUnsavedChangesAsync();
    }

    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        var treat = (Data.Questionnaires.QuestionnaireTreatment03)e.DataItem;
        await TreatmentService.DeleteTreatAsync(treat.Id);

        if (OnSave.HasDelegate)
        {
            await OnSave.InvokeAsync((previousProgress, 100));
        }
        previousProgress = Treats.Count > 0 ? 100 : 0;

        await UpdateDataAsync();
        DeleteToast();
    }

    void UpdateTreat1Answers(int? selectedTreat3)
    {
        switch (selectedTreat3)
        {
            case 1:
                treat_1_Answer = dialActiveIngredient.Where(d => d.Indication_id == 1).ToList();
                ShowOtherInput = false;
                ShowOtherInput1 = false;
                break;
            case 2:
                treat_1_Answer = dialActiveIngredient.Where(d => d.Indication_id == 2).ToList();
                ShowOtherInput = false;
                ShowOtherInput1 = false;
                break;
            case 3:
                treat_1_Answer = dialActiveIngredient.Where(d => d.Indication_id == 3).ToList();
                ShowOtherInput = false;
                ShowOtherInput1 = false;
                break;
            case 4:
                treat_1_Answer = dialActiveIngredient.Where(d => d.Indication_id == 4).ToList();
                ShowOtherInput = false;
                ShowOtherInput1 = false;
                break;
            case 5:
                treat_1_Answer = dialActiveIngredient.Where(d => d.Indication_id == 5).ToList();
                ShowOtherInput = false;
                ShowOtherInput1 = false;
                break;
            case 6:
                treat_1_Answer = dialActiveIngredient.Where(d => d.Indication_id == 6).ToList();
                ShowOtherInput = false;
                ShowOtherInput1 = false;
                break;
            case 7:
                treat_1_Answer = dialActiveIngredient.Where(d => d.Indication_id == 7).ToList();
                ShowOtherInput = false;
                ShowOtherInput1 = false;
                break;
            case 8:
                treat_1_Answer = dialActiveIngredient.Where(d => d.Indication_id == 8).ToList();
                ShowOtherInput = false;
                ShowOtherInput1 = false;
                break;
            case 9:
                treat_1_Answer = null!;
                ShowOtherInput = true;
                ShowOtherInput1 = false;
                break;
            case 10:
                treat_1_Answer = dialActiveIngredient.Where(d => d.Indication_id == 10).ToList();
                ShowOtherInput = false;
                ShowOtherInput1 = false;
                break;
            default:
                treat_1_Answer = dialActiveIngredient;
                break;
        }

        treatGrid!.Reload();
    }

    private void OnTreat1Changed(int? newValue)
    {
        SelectedTreat1 = newValue;

        var selectedOption = treat_1_Answer.FirstOrDefault(x => x.Id == SelectedTreat1);
        ShowOtherInput1 = selectedOption?.Name == "Iné...";

        if (ShowOtherInput1)
        {
            treat03!.OtherTreat = string.Empty;
        }
    }

    async Task OnEditButtonClick(Data.Questionnaires.QuestionnaireTreatment03 selectedItem)
    {
        UpdateTreat1Answers(selectedItem.Treat_3);

        await treatGrid!.StartEditDataItemAsync(selectedItem);
    }

    record DataChange(DataChangeType Type, HashSet<string> ChangedFields);
    enum DataChangeType { Modification, Addition, Delete }

    private void AddToast()
    {
        ToastService.ShowToast(new ToastOptions
            {
                ProviderName = "Overview",
                Title = "Učinná látka bola pridaná",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Success,
            });
    }

    private void Add1Toast()
    {
        ToastService.ShowToast(new ToastOptions
            {
                ProviderName = "Overview",
                Title = "Zmena v liečbe pridružných problémov bola uložená",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Success,
            });
    }

    private void ModifyToast()
    {
        ToastService.ShowToast(new ToastOptions
            {
                ProviderName = "Overview",
                Title = "Učinná látka bola zmenená",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Success,
            });
    }

    private void DeleteToast()
    {
        ToastService.ShowToast(new ToastOptions
            {
                ProviderName = "Overview",
                Title = "Učinná látka bola odstránená",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Success,
            });
    }

    async Task UpdateDataAsync()
    {
        Treats = await TreatmentService.GetQuestionnaireTreatment03(questionnaireId!);
        treatGrid!.Reload();
    }

    async Task ClearUnsavedChangesAsync()
    {
        UnsavedChanges.Clear();
        await UpdateDataAsync();
    }

}
