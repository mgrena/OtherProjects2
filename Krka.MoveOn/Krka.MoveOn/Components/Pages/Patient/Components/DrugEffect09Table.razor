@using Krka.MoveOn.Data.Questionnaires
@using Krka.MoveOn.Services
@using Krka.MoveOn.Services.Questionnaires
@using Krka.MoveOn.Components.Pages.Patient.OngoingQuestionnaire.Components
@using Krka.MoveOn.Components.Pages.Components

@attribute [StreamRendering(true)]
@rendermode InteractiveServer

@inject DrugEffect09Service DrugEffectService
@inject IToastNotificationService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="d-flex align-items-center custom-toast-background">
    <DxToastProvider Name="Overview"
                     MaxToastCount="3"
                     AnimationType="ToastAnimationType.Slide"
                     HorizontalAlignment="HorizontalAlignment.Right"
                     VerticalAlignment="VerticalEdge.Top"
                     Width="320px" />
</div>

<EditForm Model="@druggEffect"
          Context="EditFormContext"
          OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <DxFormLayout>
        <DxFormLayoutGroup Caption="Nežiaduci účinok liečiva" ColSpanMd="12" CaptionCssClass="caption-styleH0">
            <DxFormLayoutItem Caption="Ak áno, prosím vyplňte tabuľku" ColSpanMd="6" CaptionPosition="CaptionPosition.Vertical" CaptionCssClass="caption-styleH1">
                <InputRadioGroup @bind-Value="@druggEffect!.De_1" class="d-flex flex-wrap">
                    @foreach (var item in de_1_Answer)
                    {
                        <label class="d-block m-2">
                            <InputRadio class="m-2" @onclick="async() => await OnD1QAnswer(item.Id)" Value="@item.Id" required Disabled="@isReadOnly" /> @item.Name
                        </label>
                    }
                </InputRadioGroup>
                <ValidationMessage For="@(() => druggEffect!.De_1)" />
            </DxFormLayoutItem>

            @if (isDe1Answer)
            {
                <div style="width: 98%; margin-left: 15px;">
                    <DxGrid @ref="drugEffectGrid"
                            Data="DrugEffects"
                            PageSize="20"
                            PagerPosition="GridPagerPosition.Bottom"
                            PageSizeSelectorVisible="true"
                            PageSizeSelectorItems="@(new int[] { 10, 20, 100 })"
                            PageSizeSelectorAllRowsItemVisible="true"
                            PagerSwitchToInputBoxButtonCount="10"
                            PagerVisibleNumericButtonCount="10"
                            KeyFieldName="Id"
                            ValidationEnabled="false"
                            EditMode="GridEditMode.EditCell"
                            FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                            ColumnResizeMode="GridColumnResizeMode.NextColumn"
                            TextWrapEnabled="false"
                            EditModelSaving="Grid_EditModelSaving"
                            HighlightRowOnHover="true"
                            FocusedRowEnabled="true">

                        <ToolbarTemplate Context="toolbarContext">
                            @if (!isReadOnly)
                            {
                                <ManagementToolbarOnlyAdd NewClick="New_Click" BatchItemsEnabled="@BatchItemsEnabled" />
                            }
                        </ToolbarTemplate>

                        <Columns>

                            <DxGridDataColumn FieldName="De_2" Caption="Učinná látka" Width="" ReadOnly="@isReadOnly" DataRowEditorVisible="@(!isReadOnly)">
                                <EditSettings>
                                    <DxComboBoxSettings Data="@De_2_Answer" ValueFieldName="Id" TextFieldName="Name" />
                                </EditSettings>
                            </DxGridDataColumn>

                            <DxGridDataColumn FieldName="De_3" Caption="Dávka (mg)" ReadOnly="@isReadOnly" DataRowEditorVisible="@(!isReadOnly)">
                                <EditSettings>
                                    <DxSpinEditSettings MinValue="@(0m)" />
                                </EditSettings>
                            </DxGridDataColumn>

                            <DxGridDataColumn FieldName="De_4" Caption="Nežiaduci účinok" ReadOnly="@isReadOnly" DataRowEditorVisible="@(!isReadOnly)" /> @* Pozor toto budeme este naplnat *@

                            <DxGridDataColumn FieldName="De_5" Caption="Indikácia" ReadOnly="@isReadOnly" DataRowEditorVisible="@(!isReadOnly)">
                                <EditSettings>
                                    <DxComboBoxSettings Data="@De_5_Answer" ValueFieldName="Id" TextFieldName="Name" />
                                </EditSettings>
                            </DxGridDataColumn>

                            <DxGridCommandColumn Width="30px" NewButtonVisible="false">

                                <CellDisplayTemplate Context="gridContext">
                                    <div class="grid-cell-align-center">
                                        @if (!isReadOnly)
                                        {
                                            <DxButton IconCssClass="grid-icon grid-icon-delete"
                                                      RenderStyle="ButtonRenderStyle.Link"
                                                      aria-label="Delete"
                                                      Click="@(() => drugEffectGrid.ShowRowDeleteConfirmation(gridContext.VisibleIndex))">
                                                <img src="images/delete.svg" width="16" height="16" alt="Vymazať" />
                                            </DxButton>
                                        }
                                    </div>
                                </CellDisplayTemplate>

                                <CellEditTemplate Context="editContext">
                                    <div class="grid-cell-align-center">
                                        @if (!isReadOnly)
                                        {
                                            <DxButton Enabled="false"
                                                      aria-label="Delete"
                                                      CssClass="grid-disabled-button"
                                                      IconCssClass="grid-icon grid-icon-delete"
                                                      RenderStyle="ButtonRenderStyle.Link" />
                                        }
                                    </div>
                                </CellEditTemplate>

                            </DxGridCommandColumn>
                        </Columns>
                    </DxGrid>
                </div>
            }
        </DxFormLayoutGroup>
    </DxFormLayout>
</EditForm>

@code {
    [Parameter]
    public string questionnaireId { get; set; }
    bool isModified = false;

    [Parameter]
    public EventCallback<(int PreviousProgress, int CurrentProgress)> OnSave { get; set; }

    IGrid drugEffectGrid { get; set; }
    public List<Data.Questionnaires.QuestionnaireDrugEffect09> DrugEffects { get; set; }

    bool IsInfoOpen = true;
    bool isDe1Answer = false;

    List<Data.Dials.DialActiveIngredient> dialActiveIngredient = new();
    List<Data.Dials.DialActiveIngredient> De_2_Answer = new();

    List<Data.Dials.DialQGeneral> dialQGenerals = new();
    List<Data.Dials.DialQGeneral> de_1_Answer = new();

    List<Data.Dials.DialIndication> dialIndication = new();
    List<Data.Dials.DialIndication> De_5_Answer = new();

    Data.Questionnaires.QuestionnaireDrugEffect09? druggEffect;

    Dictionary<QuestionnaireDrugEffect09, DataChange> UnsavedChanges { get; } = new();
    bool BatchItemsEnabled => UnsavedChanges.Count > 0 || drugEffectGrid.IsEditing();
    bool isReadOnly = false;
    private int previousProgress = 0;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.IsInRole("Office"))
        {
            isReadOnly = true;
        }

        druggEffect = new Data.Questionnaires.QuestionnaireDrugEffect09
            {
                Questionnaire_id = questionnaireId,
                CreatedAt = DateTime.Now,
                ModifiedAt = DateTime.Now
            };

        DrugEffects = await DrugEffectService.GetQuestionnaireDrugEffect09(questionnaireId);

        previousProgress = DrugEffects.Count > 0 ? 100 : 0;

        dialActiveIngredient = await DrugEffectService.GetDialActiveIngredientAsync();
        De_2_Answer = dialActiveIngredient.Where(d => d.Type_q == 1).OrderBy(d => d.Name).OrderBy(d => d.Name == "Iné..." ? 1 : 0).ThenBy(d => d.Name).ToList();

        dialIndication = await DrugEffectService.GetDialIndicationAsync();
        De_5_Answer = dialIndication.Where(d => d.Type_q == 1).OrderBy(d => d.Name == "Iné..." ? 1 : 0).ThenBy(d => d.Name).ToList();

        dialQGenerals = await DrugEffectService.GetDialGeneralAsync();
        de_1_Answer = dialQGenerals.Where(d => d.Type_q == 5).ToList();

        await LoadQuestionnaire(questionnaireId);
    }

    private async Task LoadQuestionnaire(string questionnaireid)
    {
        var questionnaire = await DrugEffectService.GetQuestionnaireDrugEffect09ByQuestionnaireIdAsync(questionnaireid);
        if (questionnaire != null)
        {
            druggEffect = questionnaire;
            isDe1Answer = (druggEffect.De_1 == 14);
        }
    }

    async Task New_Click() => await drugEffectGrid.StartEditNewRowAsync();

    private async Task HandleValidSubmit()
    {
        if (!isReadOnly)
        {
            isModified = false;
            if (druggEffect?.De_1 == 14 && druggEffect.De_2 == null)
                return;
            await DrugEffectService.SaveDrugEffectAsync(druggEffect!);

            if (OnSave.HasDelegate)
            {
                await OnSave.InvokeAsync((previousProgress, 100));
            }
            previousProgress = DrugEffects.Count > 0 ? 100 : 0;

            Add1Toast();
            await ClearUnsavedChangesAsync();
        }
    }

    private void OnFieldChanged()
    {
        isModified = true;
    }

    async Task OnD1QAnswer(int value)
    {
        druggEffect!.De_1 = value;
        isDe1Answer = (druggEffect!.De_1 == 14);

        if (druggEffect!.De_1 == 15 || druggEffect!.De_1 == 14)
        {
            await HandleValidSubmit();
        }

    }

    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        var drugEffect = (Data.Questionnaires.QuestionnaireDrugEffect09)e.EditModel;
        var dataItem = (Data.Questionnaires.QuestionnaireDrugEffect09)e.DataItem;
        drugEffect.Questionnaire_id = questionnaireId;
        if (drugEffect?.De_2 == null)
        {
            return;
        }
        else if (e.IsNew)
        {
            DrugEffects.Add(drugEffect);
            UnsavedChanges[drugEffect] = new(DataChangeType.Addition, new());
        }
        else
        {
            UnsavedChanges[drugEffect] = new(DataChangeType.Modification, new());
        }

        foreach (var unsavedChange in UnsavedChanges)
        {
            var changedItem = unsavedChange.Key;
            var changeType = unsavedChange.Value.Type;
            switch (changeType)
            {
                case DataChangeType.Addition:
                    await DrugEffectService.SaveDrugEffectAsync(changedItem);
                    AddToast();
                    break;
                case DataChangeType.Modification:
                    await DrugEffectService.SaveDrugEffectAsync(changedItem);
                    ModifyToast();
                    break;
            }
        }

        if (OnSave.HasDelegate)
        {
            await OnSave.InvokeAsync((previousProgress, 100));
            previousProgress = 100;
        }
        previousProgress = DrugEffects.Count > 0 ? 100 : 0;

        await ClearUnsavedChangesAsync();
        isModified = false;
    }

    async Task ClearUnsavedChangesAsync()
    {
        UnsavedChanges.Clear();
        if (isDe1Answer)
            await UpdateDataAsync();
    }

    async Task UpdateDataAsync()
    {
        DrugEffects = await DrugEffectService.GetQuestionnaireDrugEffect09(questionnaireId);
        drugEffectGrid.Reload();
    }

    private void AddToast()
    {
        ToastService.ShowToast(new ToastOptions
            {
                ProviderName = "Overview",
                Title = "Učinná látka bola pridaná",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Success,
            });
    }

    private void Add1Toast()
    {
        ToastService.ShowToast(new ToastOptions
            {
                ProviderName = "Overview",
                Title = "Nežiadúci účinok liečiva bol pridaný",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Success,
            });
    }

    private void ModifyToast()
    {
        ToastService.ShowToast(new ToastOptions
            {
                ProviderName = "Overview",
                Title = "Učinná látka bola zmenená",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Success,
            });
    }

    private void DeleteToast()
    {
        ToastService.ShowToast(new ToastOptions
            {
                ProviderName = "Overview",
                Title = "Učinná látka bola odstránená",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Success,
            });
    }

    record DataChange(DataChangeType Type, HashSet<string> ChangedFields);
    enum DataChangeType { Modification, Addition, Delete }
}