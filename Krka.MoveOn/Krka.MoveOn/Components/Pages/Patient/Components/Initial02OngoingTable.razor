@using DevExpress.Blazor.Internal
@using Krka.MoveOn.Data.Questionnaires
@using Krka.MoveOn.Services.Questionnaires
@using Krka.MoveOn.Components.Pages.Patient.EntryQuestionnaire.Components
@using Krka.MoveOn.Components.Pages.Components

@inject Initial02Service InitialService
@inject QuestionnaireService QuestionnaireService
@inject IToastNotificationService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider


<EditForm Model="@questionnaire"
          Context="EditFormContext"
          OnValidSubmit="@HandleValidSubmit">

    <DataAnnotationsValidator />
    <DxFormLayout>
        <DxFormLayoutGroup Caption="Liečba Parkinsonovej choroby" ColSpanMd="12" CaptionCssClass="caption-styleH0">
            <DxFormLayoutItem Caption="Dátum vyšetrenia" ColSpanMd="6" CaptionPosition="CaptionPosition.Vertical" CaptionCssClass="caption-styleH1">

                <DxDateEdit Date="@questionnaire.Date" DateChanged="@((DateTime newValue) => DateChangeValue(newValue))" DateExpression="@(() => questionnaire.Date)" ShowValidationIcon="true" required ReadOnly="@isReadOnly" DataRowEditorVisible="@(!isReadOnly)" />

            </DxFormLayoutItem>

            <div style="width: 98%; margin-left: 10px; margin-top: 10px;">
                <DxGrid @ref="initGrid"
                        Data="Inits"
                        PageSize="20"
                        PagerPosition="GridPagerPosition.Bottom"
                        PageSizeSelectorVisible="true"
                        PageSizeSelectorItems="@(new int[] { 10, 20, 100 })"
                        PageSizeSelectorAllRowsItemVisible="true"
                        PagerSwitchToInputBoxButtonCount="10"
                        PagerVisibleNumericButtonCount="10"
                        KeyFieldName="Id"
                        ValidationEnabled="false"
                        EditMode="GridEditMode.EditCell"
                        FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                        ColumnResizeMode="GridColumnResizeMode.NextColumn"
                        TextWrapEnabled="false"
                        EditModelSaving="Grid_EditModelSaving"
                        DataItemDeleting="Grid_DataItemDeleting"
                        HighlightRowOnHover="true"
                        FocusedRowEnabled="true">
                    <ToolbarTemplate Context="toolbarContext">
                        @if (!isReadOnly)
                        {
                            <ManagementToolbarOnlyAdd NewClick="New_Click" BatchItemsEnabled="@BatchItemsEnabled" />
                        }
                    </ToolbarTemplate>

                    <Columns>
                        <DxGridDataColumn FieldName="Init_1" Caption="Učinná látka" ReadOnly="@isReadOnly" DataRowEditorVisible="@(!isReadOnly)">
                            <EditSettings>
                                <DxComboBoxSettings Data="@init_1_Answer" ValueFieldName="Id" TextFieldName="Name" />
                            </EditSettings>
                        </DxGridDataColumn>

                        <DxGridDataColumn FieldName="Init_2" Caption="Dávka (mg)" ReadOnly="@isReadOnly" DataRowEditorVisible="@(!isReadOnly)">
                            <EditSettings>
                                <DxSpinEditSettings MinValue="@(0m)" />
                            </EditSettings>
                        </DxGridDataColumn>

                        <DxGridDataColumn FieldName="Init_3" Caption="Počet dávok denne" ReadOnly="@isReadOnly" DataRowEditorVisible="@(!isReadOnly)">
                            <EditSettings>
                                <DxSpinEditSettings MinValue="0" />
                            </EditSettings>
                        </DxGridDataColumn>

                        <DxGridDataColumn FieldName="Init_4" Caption="Denná dávka" ReadOnly="@isReadOnly" DataRowEditorVisible="@(!isReadOnly)">
                            <EditSettings>
                                <DxSpinEditSettings MinValue="@(0m)" />
                            </EditSettings>
                        </DxGridDataColumn>

                        @if (!isReadOnly)
                        {
                            <DxGridCommandColumn Width="30px" NewButtonVisible="false">

                                <CellDisplayTemplate Context="gridContext">
                                    <div class="grid-cell-align-center">
                                        <DxButton IconCssClass="grid-toolbar-delete"
                                                  RenderStyle="ButtonRenderStyle.Link"
                                                  aria-label="Delete"
                                                  Click="@(() => initGrid.ShowRowDeleteConfirmation(gridContext.VisibleIndex))">
                                        </DxButton>
                                    </div>
                                </CellDisplayTemplate>

                                <CellEditTemplate Context="editContext">
                                    <div class="grid-cell-align-center">
                                        <DxButton Enabled="false"
                                                  aria-label="Delete"
                                                  CssClass="grid-disabled-button"
                                                  IconCssClass="grid-icon grid-icon-delete"
                                                  RenderStyle="ButtonRenderStyle.Link" />

                                    </div>
                                </CellEditTemplate>
                            </DxGridCommandColumn>
                        }
                    </Columns>

                    <TotalSummary>
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" FieldName="Init_2" ValueDisplayFormat=" {0}" />
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" FieldName="Init_3" ValueDisplayFormat=" {0}" />
                    </TotalSummary>

                </DxGrid>

            </div>
        </DxFormLayoutGroup>
    </DxFormLayout>
</EditForm>


@code {
    [Parameter]
    public string questionnaireId { get; set; }

    [Parameter]
    public EventCallback<(int PreviousProgress, int CurrentProgress)> OnSave { get; set; }

    private int ProgressPercentage = 0;

    IGrid initGrid { get; set; }

    public List<Data.Questionnaires.QuestionnaireInitial02> Inits { get; set; }


    List<Data.Dials.DialActiveIngredient> dialActiveIngredient = new();
    List<Data.Dials.DialActiveIngredient> init_1_Answer = new();

    Questionnaire questionnaire = new Questionnaire
        {
            Date = DateTime.Now,
            PatientId = 0,
            Order = 0,
            ModifiedAt = DateTime.Now,
            CreatedAt = DateTime.Now
        };

    Dictionary<QuestionnaireInitial02, DataChange> UnsavedChanges { get; } = new();
    bool BatchItemsEnabled => UnsavedChanges.Count > 0 || initGrid.IsEditing();

    bool isReadOnly = false;
    bool IsInfoOpen = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.IsInRole("Office"))
        {
            isReadOnly = true;
        }

        Inits = await InitialService.GetQuestionnaireInitial02(questionnaireId);
        ProgressPercentage = Inits.Count > 0 ? 100 : 0;
        dialActiveIngredient = await InitialService.GetDialActiveIngredientAsync();
        init_1_Answer = dialActiveIngredient.Where(d => d.Type_q == 1).OrderBy(d => d.Name).ToList();

        questionnaire = await QuestionnaireService.GetQuestionnairesByIdAsync(questionnaireId);

    }

    private void AddToast()
    {
        ToastService.ShowToast(new ToastOptions
            {
                ProviderName = "Overview",
                Title = "Učinná látka bola pridaná",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Success,
            });
    }

    private void Add1Toast()
    {
        ToastService.ShowToast(new ToastOptions
            {
                ProviderName = "Overview",
                Title = "Liečba Parkinsonovej choroby uložená",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Success,
            });
    }

    private void ModifyToast()
    {
        ToastService.ShowToast(new ToastOptions
            {
                ProviderName = "Overview",
                Title = "Učinná látka bola zmenená",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Success,
            });
    }

    private void DeleteToast()
    {
        ToastService.ShowToast(new ToastOptions
            {
                ProviderName = "Overview",
                Title = "Učinná látka bola odstránená",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Success,
            });
    }

    async Task UpdateDataAsync()
    {
        Inits = await InitialService.GetQuestionnaireInitial02(questionnaireId);
        initGrid.Reload();
    }

    async Task New_Click() => await initGrid.StartEditNewRowAsync();

    async Task ClearUnsavedChangesAsync()
    {
        UnsavedChanges.Clear();
        await UpdateDataAsync();
    }

    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        var init = (Data.Questionnaires.QuestionnaireInitial02)e.EditModel;
        var dataItem = (Data.Questionnaires.QuestionnaireInitial02)e.DataItem;
        init.Questionnaire_id = questionnaireId;

        if (init?.Init_1 == null)
        {
            return;
        }
        else if (e.IsNew)
        {
            Inits.Add(init);
            UnsavedChanges[init] = new(DataChangeType.Addition, new());
        }
        else
        {
            var changedFields = DataUtils.ApplyModifiedFields(init, dataItem);
            if (changedFields.Count > 0)
            {
                if (UnsavedChanges.TryGetValue(dataItem, out var changes))
                    changes.ChangedFields.UnionWith(changedFields);
                else
                    UnsavedChanges.Add(dataItem, new(DataChangeType.Modification, changedFields));
            }
        }

        initGrid.Reload();

        foreach (var unsavedChange in UnsavedChanges)
        {
            var changedItem = unsavedChange.Key;
            var changeType = unsavedChange.Value.Type;
            switch (changeType)
            {
                case DataChangeType.Addition:
                    await InitialService.SaveInitialAsync(changedItem);
                    AddToast();
                    break;
                case DataChangeType.Modification:
                    await InitialService.SaveInitialAsync(changedItem);
                    ModifyToast();
                    break;
            }
        }

        if (OnSave.HasDelegate)
        {
            await OnSave.InvokeAsync((ProgressPercentage, Inits.Count > 0 ? 100 : 0));
        }
        ProgressPercentage = Inits.Count > 0 ? 100 : 0;

        await ClearUnsavedChangesAsync();
    }

    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        var init = (Data.Questionnaires.QuestionnaireInitial02)e.DataItem;
        await InitialService.DeleteInitAsync(init.Id);
        await UpdateDataAsync();

        if (OnSave.HasDelegate)
        {
            await OnSave.InvokeAsync((ProgressPercentage, Inits.Count > 0 ? 100 : 0));
        }
        ProgressPercentage = Inits.Count > 0 ? 100 : 0;

        DeleteToast();
    }

    private async Task HandleValidSubmit()
    {
        await QuestionnaireService.UpdateQuestionnaireAsync(questionnaire);
        Add1Toast();
    }

    record DataChange(DataChangeType Type, HashSet<string> ChangedFields);

    enum DataChangeType { Modification, Addition, Delete }

    //Trieda pre hromadne ukladanie
    public static class DataUtils
    {
        public static HashSet<string> ApplyModifiedFields<T>(T source, T target)
        {
            var changedFields = new HashSet<string>();
            var properties = typeof(T).GetProperties();

            foreach (var property in properties)
            {
                var sourceValue = property.GetValue(source);
                var targetValue = property.GetValue(target);

                if (!Equals(sourceValue, targetValue))
                {
                    property.SetValue(target, sourceValue);
                    changedFields.Add(property.Name);
                }
            }

            return changedFields;
        }
    }

    async Task DateChangeValue(DateTime date)
    {
        questionnaire.Date = date;
        await HandleValidSubmit();
    }
}
