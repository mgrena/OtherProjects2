@using Krka.MoveOn.Services.Questionnaires
@using Krka.MoveOn.Components.Pages.Patient.OngoingQuestionnaire.Components
@using Krka.MoveOn.Data.Questionnaires

@inject Satisfaction10Service SatisfactionService
@inject IToastNotificationService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider


<style>
    table {
    width: 100%;
    }

    th {
    text-align: center;
    }

    .radio-container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;
    }
</style>

<div class="d-flex align-items-center custom-toast-background">
    <DxToastProvider Name="Overview"
    MaxToastCount="3"
    AnimationType="ToastAnimationType.Slide"
    HorizontalAlignment="HorizontalAlignment.Right"
    VerticalAlignment="VerticalEdge.Top"
    Width="320px" />
</div>

<DxLoadingPanel @bind-Visible="PanelVisible"
IsContentBlocked="true"
ApplyBackgroundShading="true"
IndicatorAreaVisible="false"
Text="Fetching Data...">

    <EditForm Model="@SatisfactionQ"
    Context="EditFormContext"
    OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <DxFormLayout>
            <DxFormLayoutGroup Caption="Hodnotenie spokojnosti s liečbou" CaptionCssClass="caption-styleH0">


                <table class="table-bordered">
                    <thead>
                        <tr>
                            <th></th>
                            <th>Veľmi nespokojný</th>
                            <th>Nespokojný</th>
                            <th>Neutrálny</th>
                            <th>Spokojný</th>
                            <th>Veľmi spokojný</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Celková spokojnosť s liečbou</td>
                            @foreach (var option in ratingOptions)
                            {
                                <td>
                                    <div class="radio-container">
                                        <DxRadio GroupValue="@SatisfactionQ.SF_1" Value="@option" GroupValueChanged="@(EventCallback.Factory.Create<int>(this, (newValue) => GroupChangeValue(newValue, 1)))" GroupValueExpression="@(() => SatisfactionQ.SF_1)" GroupName="sf_1_group" ReadOnly="@isReadOnly" />
                                    </div>
                                </td>
                            }
                        </tr>
                        <tr>
                            <td>Spokojnosť so zlepšením depresívnych symptómov</td>
                            @foreach (var option in ratingOptions)
                            {
                                <td>
                                    <div class="radio-container">
                                        <DxRadio GroupValue="@SatisfactionQ.SF_2" Value="@option" GroupValueChanged="@(EventCallback.Factory.Create<int>(this, (newValue) => GroupChangeValue(newValue, 2)))" GroupValueExpression="@(() => SatisfactionQ.SF_2)" GroupName="sf_2_group" ReadOnly="@isReadOnly" />
                                    </div>
                                </td>
                            }
                        </tr>
                        <tr>
                            <td>Spokojnosť so zlepšením ranných príznakov (t.j. ranná stuhnutosť, problém so vstávaním z postele)</td>
                            @foreach (var option in ratingOptions)
                            {
                                <td>
                                    <div class="radio-container">
                                        <DxRadio GroupValue="@SatisfactionQ.SF_3" Value="@option" GroupValueChanged="@(EventCallback.Factory.Create<int>(this, (newValue) => GroupChangeValue(newValue, 3)))" GroupValueExpression="@(() => SatisfactionQ.SF_3)" GroupName="sf_3_group" ReadOnly="@isReadOnly" />
                                    </div>
                                </td>
                            }
                        </tr>
                        <tr>
                            <td>Spokojnosť so zlepšením únavy</td>
                            @foreach (var option in ratingOptions)
                            {
                                <td>
                                    <div class="radio-container">
                                        <DxRadio GroupValue="@SatisfactionQ.SF_4" Value="@option" GroupValueChanged="@(EventCallback.Factory.Create<int>(this, (newValue) => GroupChangeValue(newValue, 4)))" GroupValueExpression="@(() => SatisfactionQ.SF_4)" GroupName="sf_4_group" ReadOnly="@isReadOnly" />
                                    </div>
                                </td>
                            }
                        </tr>
                    </tbody>
                </table>
            </DxFormLayoutGroup>
        </DxFormLayout>
    </EditForm>


</DxLoadingPanel>

@code {

    [Parameter]
    public string questionnaireId { get; set; }

    [Parameter]
    public EventCallback<(int PreviousProgress, int CurrentProgress)> OnSave { get; set; }

    bool PanelVisible { get; set; }

    private List<int> ratingOptions = new List<int> { 1, 2, 3, 4, 5 };

    QuestionnaireSatisfaction10 SatisfactionQ { get; set; } = new QuestionnaireSatisfaction10
        {
            Questionnaire_id = "",
            SF_1 = 0,
            SF_2 = 0,
            SF_3 = 0,
            SF_4 = 0
        };

    bool isReadOnly = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.IsInRole("Office"))
        {
            isReadOnly = true;
        }

        PanelVisible = true;
        SatisfactionQ = await SatisfactionService.GetQuestionnaireSatisfaction10(questionnaireId);
        if (SatisfactionQ == null)
        {
            SatisfactionQ = new QuestionnaireSatisfaction10
                {
                    Questionnaire_id = questionnaireId,
                    SF_1 = 0,
                    SF_2 = 0,
                    SF_3 = 0,
                    SF_4 = 0
                };
        }
        PanelVisible = false;
    }

    private async Task HandleValidSubmit()
    {
        if (SatisfactionQ != null)
        {
            int previousProgress = SatisfactionQ.ProgressPercentage;
            await SatisfactionService.SaveSatisfactionAsync(SatisfactionQ);

            if (OnSave.HasDelegate)
            {
                await OnSave.InvokeAsync((previousProgress, 100));
            }

            AddToast();
        }
    }

    /// <summary>
    /// Notifikacia
    /// </summary>
    private void AddToast()
    {
        ToastService.ShowToast(new ToastOptions
            {
                ProviderName = "Overview",
                Title = "Hodnotenie spokojnosti  úspešne uložené",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Success,
            });
    }

    async Task GroupChangeValue(int value, int groupIndex)
    {
        switch (groupIndex)
        {
            case 1:
                SatisfactionQ.SF_1 = value;
                break;
            case 2:
                SatisfactionQ.SF_2 = value;
                break;
            case 3:
                SatisfactionQ.SF_3 = value;
                break;
            case 4:
                SatisfactionQ.SF_4 = value;
                break;
            default:
                throw new ArgumentException("Neznámy index Group");
        }

        await HandleValidSubmit();
    }
}
