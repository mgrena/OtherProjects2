@using DevExpress.Blazor.Internal
@using Krka.MoveOn.Data.Questionnaires
@using Krka.MoveOn.Services.Questionnaires
@using Krka.MoveOn.Components.Pages.Patient.EntryQuestionnaire.Components
@using Krka.MoveOn.Components.Pages.Components

@inject Initial02Service InitialService
@inject IToastNotificationService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider

<DxGrid @ref="initGrid"
        Data="Inits"
        PageSize="20"
        PagerPosition="GridPagerPosition.Bottom"
        PageSizeSelectorVisible="true"
        PageSizeSelectorItems="@(new int[] { 10, 20, 100 })"
        PageSizeSelectorAllRowsItemVisible="true"
        PagerSwitchToInputBoxButtonCount="10"
        PagerVisibleNumericButtonCount="10"
        KeyFieldName="Id"
        ValidationEnabled="false"
        EditMode="GridEditMode.EditCell"
        FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
        ColumnResizeMode="GridColumnResizeMode.NextColumn"
        TextWrapEnabled="false"
        EditModelSaving="Grid_EditModelSaving"
        DataItemDeleting="Grid_DataItemDeleting"
        HighlightRowOnHover="true"
        FocusedRowEnabled="true">
    <ToolbarTemplate Context="toolbarContext">
        @if (!isReadOnly)
        {
            <ManagementToolbar NewClick="New_Click" SaveClick="Save_Click" CancelClick="Cancel_Click" BatchItemsEnabled="@BatchItemsEnabled" />
        }
    </ToolbarTemplate>

    <Columns>
        <DxGridDataColumn FieldName="Init_1" Caption="Učinná látka" ReadOnly="@isReadOnly" DataRowEditorVisible="@(!isReadOnly)">
            <EditSettings>
                <DxComboBoxSettings Data="@init_1_Answer" ValueFieldName="Id" TextFieldName="Name" />
            </EditSettings>
        </DxGridDataColumn>

        <DxGridDataColumn FieldName="Init_2" Caption="Dávka (mg)" ReadOnly="@isReadOnly" DataRowEditorVisible="@(!isReadOnly)" />

        <DxGridDataColumn FieldName="Init_3" Caption="Počet dávok denne" ReadOnly="@isReadOnly" DataRowEditorVisible="@(!isReadOnly)" />

        <DxGridDataColumn Caption="Denná dávka" ReadOnly="@isReadOnly" DataRowEditorVisible="@(!isReadOnly)">
            <CellDisplayTemplate Context="gridContext">
                @{
                    if (gridContext.DataItem is Data.Questionnaires.QuestionnaireInitial02 dataItem)
                    {
                        decimal init2 = dataItem.Init_2 != null ? dataItem.Init_2 : 0m;
                        int init3 = dataItem.Init_3 ?? 0;
                        var calculatedValue = init2 * init3;
                        @calculatedValue
                    }
                    else
                    {
                        @:0
                    }
                }
            </CellDisplayTemplate>
        </DxGridDataColumn>

        @if (!isReadOnly)
        {
            <DxGridCommandColumn Width="30px" NewButtonVisible="false">

                <CellDisplayTemplate Context="gridContext">
                    <div class="grid-cell-align-center">
                        <DxButton IconCssClass="grid-icon grid-icon-delete"
                                  RenderStyle="ButtonRenderStyle.Link"
                                  aria-label="Delete"
                                  Click="@(() => initGrid.ShowRowDeleteConfirmation(gridContext.VisibleIndex))">
                            <img src="images/delete.svg" width="16" height="16" alt="Vymazať" />
                        </DxButton>
                    </div>
                </CellDisplayTemplate>

                <CellEditTemplate Context="editContext">
                    <div class="grid-cell-align-center">
                        <DxButton Enabled="false"
                                  aria-label="Delete"
                                  CssClass="grid-disabled-button"
                                  IconCssClass="grid-icon grid-icon-delete"
                                  RenderStyle="ButtonRenderStyle.Link" />

                    </div>
                </CellEditTemplate>
            </DxGridCommandColumn>
        }
    </Columns>

    <TotalSummary>
        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" FieldName="Init_2" ValueDisplayFormat=" {0}" />
        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" FieldName="Init_3" ValueDisplayFormat=" {0}" />
    </TotalSummary>

</DxGrid>

@code {
    [Parameter]
    public string questionnaireId { get; set; }

    IGrid initGrid { get; set; }

    public List<Data.Questionnaires.QuestionnaireInitial02> Inits { get; set; }

    List<Data.Dials.DialActiveIngredient> dialActiveIngredient = new();
    List<Data.Dials.DialActiveIngredient> init_1_Answer = new();

    Dictionary<QuestionnaireInitial02, DataChange> UnsavedChanges { get; } = new();
    bool BatchItemsEnabled => UnsavedChanges.Count > 0 || initGrid.IsEditing();

    bool isReadOnly = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.IsInRole("Office"))
        {
            isReadOnly = true;
        }

        Inits = await InitialService.GetQuestionnaireInitial02(questionnaireId);

        dialActiveIngredient = await InitialService.GetDialActiveIngredientAsync();
        init_1_Answer = dialActiveIngredient.Where(d => d.Type_q == 1).OrderBy(d => d.Name).ToList();

    }

    private void AddToast()
    {
        ToastService.ShowToast(new ToastOptions
            {
                ProviderName = "Overview",
                Title = "Učinná látka bola pridaná",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Success,
            });
    }

    private void ModifyToast()
    {
        ToastService.ShowToast(new ToastOptions
            {
                ProviderName = "Overview",
                Title = "Učinná látka bola zmenená",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Success,
            });
    }

    private void DeleteToast()
    {
        ToastService.ShowToast(new ToastOptions
            {
                ProviderName = "Overview",
                Title = "Učinná látka bola odstránená",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Success,
            });
    }

    async Task UpdateDataAsync()
    {
        Inits = await InitialService.GetQuestionnaireInitial02(questionnaireId);
        initGrid.Reload();
    }

    async Task New_Click() => await initGrid.StartEditNewRowAsync();

    async Task Cancel_Click() => await ClearUnsavedChangesAsync();

    async Task Save_Click()
    {
        foreach (var unsavedChange in UnsavedChanges)
        {
            var changedItem = unsavedChange.Key;
            var changeType = unsavedChange.Value.Type;
            switch (changeType)
            {
                case DataChangeType.Addition:
                    await InitialService.SaveInitialAsync(changedItem);
                    AddToast();
                    break;
                case DataChangeType.Modification:
                    await InitialService.SaveInitialAsync(changedItem);
                    ModifyToast();
                    break;
            }
        }
        await ClearUnsavedChangesAsync();
    }

    async Task ClearUnsavedChangesAsync()
    {
        UnsavedChanges.Clear();
        await UpdateDataAsync();
    }

    void Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        var init = (Data.Questionnaires.QuestionnaireInitial02)e.EditModel;
        var dataItem = (Data.Questionnaires.QuestionnaireInitial02)e.DataItem;
        init.Questionnaire_id = questionnaireId;
        if (e.IsNew)
        {
            Inits.Add(init);
            UnsavedChanges[init] = new(DataChangeType.Addition, new());
        }
        else
        {
            var changedFields = DataUtils.ApplyModifiedFields(init, dataItem);
            if (changedFields.Count > 0)
            {
                if (UnsavedChanges.TryGetValue(dataItem, out var changes))
                    changes.ChangedFields.UnionWith(changedFields);
                else
                    UnsavedChanges.Add(dataItem, new(DataChangeType.Modification, changedFields));
            }
        }
    }

    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        var init = (Data.Questionnaires.QuestionnaireInitial02)e.DataItem;
        await InitialService.DeleteInitAsync(init.Id);
        await UpdateDataAsync();
        DeleteToast();
    }

    record DataChange(DataChangeType Type, HashSet<string> ChangedFields);

    enum DataChangeType { Modification, Addition, Delete }

    //Trieda pre hromadne ukladanie
    public static class DataUtils
    {
        public static HashSet<string> ApplyModifiedFields<T>(T source, T target)
        {
            var changedFields = new HashSet<string>();
            var properties = typeof(T).GetProperties();

            foreach (var property in properties)
            {
                var sourceValue = property.GetValue(source);
                var targetValue = property.GetValue(target);

                if (!Equals(sourceValue, targetValue))
                {
                    property.SetValue(target, sourceValue);
                    changedFields.Add(property.Name);
                }
            }

            return changedFields;
        }
    }
}
