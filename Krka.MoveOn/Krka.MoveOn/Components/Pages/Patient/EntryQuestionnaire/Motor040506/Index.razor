@page "/entryQ/motor/{questionnaireId:guid}"

@using Krka.MoveOn.Services.Questionnaires
@using Krka.MoveOn.Components.Pages.Patient.EntryQuestionnaire.Components
@using Krka.MoveOn.Components.Pages.Patient.Components
@using Microsoft.AspNetCore.Authorization
@using Krka.MoveOn.Components.Pages.Components

@attribute [Authorize]
@attribute [StreamRendering(true)]
@rendermode InteractiveServer
@inject QuestionnaireProgressService QuestionnaireProgressService

<PageTitle>MoveOn - MDS-UPDRS škála </PageTitle>

<div class="d-flex align-items-center custom-toast-background">
    <DxToastProvider Name="Overview"
                     MaxToastCount="3"
                     AnimationType="ToastAnimationType.Slide"
                     HorizontalAlignment="HorizontalAlignment.Right"
                     VerticalAlignment="VerticalEdge.Top"
                     Width="320px" />
</div>

<div class="cw-880" style="width: 70%; margin: 0 auto;">
    <_EntryBtn />
    <QuestionnaireProgressBar questionnaireId="@QuestionnaireIdAsString" @ref="QuestionnaireProgressBarRef" />

    <div class="grid-container" style="display: flex;">
        <div class="grid-item" style="flex: 1;">
            <Motor04Table questionnaireId="@QuestionnaireIdAsString" OnSave="HandleTableSaved" />
            <br>
            <Motor05Table questionnaireId="@QuestionnaireIdAsString" OnSave="HandleTableSaved" />
        </div>
        <div class="grid-item" style="flex: 1; margin-left: 20px;">
            <Motor06Table questionnaireId="@QuestionnaireIdAsString" OnSave="HandleTableSaved" />
        </div>
    </div>
</div>



@code {
    [Parameter]
    public Guid questionnaireId { get; set; }

    public string QuestionnaireIdAsString => questionnaireId.ToString();

    private QuestionnaireProgressBar QuestionnaireProgressBarRef;

    private async Task HandleTableSaved((int PreviousProgress, int CurrentProgress) progressData)
    {
        if (QuestionnaireProgressBarRef != null)
        {
            await QuestionnaireProgressService.UpdateProgressAsync(QuestionnaireIdAsString);
            await QuestionnaireProgressBarRef.RefreshDataAsync(progressData.PreviousProgress / 3, progressData.CurrentProgress / 3);
        }
    }

}