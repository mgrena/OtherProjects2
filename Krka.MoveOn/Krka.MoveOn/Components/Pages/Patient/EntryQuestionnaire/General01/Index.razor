@page "/entryQ/gen/{questionnaireId:guid}"
@using Krka.MoveOn.Services.Questionnaires
@using Krka.MoveOn.Components.Pages.Patient.EntryQuestionnaire.Components
@using Krka.MoveOn.Components.Pages.Components
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using System.ComponentModel.DataAnnotations
@using Krka.MoveOn.Services

@attribute [Authorize]
@attribute [StreamRendering(true)]
@rendermode InteractiveServer

@inject General01Service Q01Service
@inject QuestionnaireProgressService QuestionnaireProgressService
@inject IToastNotificationService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager


<PageTitle>MoveOn - Detekcia pacientov s príznakmi PC</PageTitle>

<div class="d-flex align-items-center custom-toast-background">
    <DxToastProvider Name="Overview"
                     MaxToastCount="3"
                     AnimationType="ToastAnimationType.Slide"
                     HorizontalAlignment="HorizontalAlignment.Right"
                     VerticalAlignment="VerticalEdge.Top"
                     Width="320px" />
</div>


<div class="cw-880 mo-main-layout">

    <_EntryBtn />
    <div class="mo-nav-submenu-bar1">
        <QuestionnaireProgressBar questionnaireId="@QuestionnaireIdAsString" @ref="QuestionnaireProgressBarRef" />
    </div>
    <EditForm Model="@gen"
              Context="EditFormContext"
              OnValidSubmit="@HandleValidSubmit">
        <DxFormLayout>
            <DxFormLayoutGroup Caption="MoveOn - Detekcia pacientov s príznakmi Parkinsonovej choroby a jej ďalší manažment" ColSpanMd="6" CaptionCssClass="caption-styleH0" ExpandButtonDisplayMode="GroupExpandButtonDisplayMode.Start" AnimationType="LayoutAnimationType.Slide" CssClass="custom-min-width">

                <DxFormLayoutItem Caption="Dátum" ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical" CaptionCssClass="caption-styleH1">
                    <DxDateEdit Date="gen!.Gen_1" DateChanged="@((DateTime newValue) => DateChangeValue(newValue))" DateExpression="@(() => gen!.Gen_1)" ShowValidationIcon="true" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" ReadOnly="@isReadOnly" />
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="Pohlavie" ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical" CaptionCssClass="caption-styleH1">
                    <InputRadioGroup @bind-Value="@gen!.Gen_2_DG" class="d-flex flex-wrap">
                        @foreach (var item in gen_2_DGAnswer)
                        {
                            <InputRadio class="m-2" @onclick="async() => await SaveInbox(item.Id, 1)" Value="@item.Id" Disabled="@isReadOnly" /> @item.Name
                        }
                    </InputRadioGroup>
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="Rodinný stav" ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical" CaptionCssClass="caption-styleH1">
                    <InputRadioGroup @bind-Value="@gen!.Gen_3_DG">
                        @foreach (var item in gen_3_DGAnswer)
                        {
                            <label class="d-block m-2">
                                <InputRadio @onclick="async() => await SaveInbox(item.Id, 2)" Value="@item.Id" Disabled="@isReadOnly" /> @item.Name
                            </label>
                        }
                    </InputRadioGroup>
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="Pracovný pomer" ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical" CaptionCssClass="caption-styleH1">
                    <InputRadioGroup @bind-Value="@gen!.Gen_4_DG">
                        @foreach (var item in gen_4_DGAnswer)
                        {
                            <label class="d-block m-2">
                                <InputRadio @onclick="async() => await SaveInbox(item.Id, 3)" Value="@item.Id" Disabled="@isReadOnly" /> @item.Name
                            </label>
                        }
                    </InputRadioGroup>
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="Fajčenie" ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical" CaptionCssClass="caption-styleH1">
                    <InputRadioGroup @bind-Value="@gen!.Gen_5_D" class="d-flex flex-wrap">
                        @foreach (var item in gen_5_DGAnswer)
                        {
                            <InputRadio class="m-2" @onclick="async() => await SaveInbox(item.Id, 4)" Value="@item.Id" Disabled="@isReadOnly" /> @item.Name
                        }
                    </InputRadioGroup>
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="Pozitívna rodinná anamnéza Parkinsonovej choroby" ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical" CaptionCssClass="caption-styleH1">
                    <InputRadioGroup @bind-Value="@gen!.Gen_6_DG" class="d-flex flex-wrap">
                        @foreach (var item in gen_6_DGAnswer)
                        {
                            <InputRadio class="m-2" @onclick="async() => await SaveInbox(item.Id, 5)" Value="@item.Id" Disabled="@isReadOnly" /> @item.Name
                        }
                    </InputRadioGroup>
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="Anamnéza užívania antipsychotík" ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical" CaptionCssClass="caption-styleH1">
                    <InputRadioGroup @bind-Value="@gen!.Gen_7_DG" class="d-flex flex-wrap">
                        @foreach (var item in gen_7_DGAnswer)
                        {
                            <InputRadio class="m-2" Value="@item.Id" @onclick="async() => { await SaveInbox(item.Id, 6); AnswerChange(item.Id, 1);}" Disabled="@isReadOnly" /> @item.Name
                        }
                    </InputRadioGroup>
                </DxFormLayoutItem>

                @if (isGen7_1_DM)
                {
                    <div class="h-100 grid-wrapper">
                        <div style="width: 100%; padding: 1%;">
                            <DxLayoutBreakpoint DeviceSize="DeviceSize.XSmall" @bind-IsActive="@isXSmallScreen" />
                            @if (isXSmallScreen)
                            {
                                <div class="align-self-start p-2">
                                    <DxButton RenderStyle="ButtonRenderStyle.Primary"
                                    IconCssClass="grid-icon-column-chooser"
                                    CssClass="fab"
                                    aria-label="Výber stĺpcov"
                                    Click="@ShowColumnChooser" />
                                </div>
                            }

                            <DxGrid @ref="Gen7YesGrid"
                            Data="Gen7YesTable"
                            PageSize="10"
                            PagerPosition="GridPagerPosition.Bottom"
                            PageSizeSelectorVisible="true"
                            PageSizeSelectorItems="@(new int[] { 10, 20, 100 })"
                            PageSizeSelectorAllRowsItemVisible="true"
                            PagerSwitchToInputBoxButtonCount="10"
                            PagerVisibleNumericButtonCount="10"
                            KeyFieldName="Id"
                            ValidationEnabled="false"
                            EditMode="GridEditMode.PopupEditForm"
                            PopupEditFormHeaderText="Ak áno, ktoré lieky (názov, denná dávka)?"
                            FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                            ColumnResizeMode="GridColumnResizeMode.NextColumn"
                            TextWrapEnabled="true"
                            HighlightRowOnHover="true"
                            FocusedRowEnabled="true"
                            CustomizeEditModel="OnCustomizeEditModel"
                            EditModelSaving="Grid_EditModelSaving"
                            DataItemDeleting="Grid_DataItemDeleting">

                                <ToolbarTemplate Context="toolbarContext">
                                    @if (!isReadOnly)
                                    {
                                        <ManagementToolbarGeneral NewClick="New_Click" BatchItemsEnabled="@BatchItemsEnabled" />
                                    }
                                </ToolbarTemplate>

                                <Columns>
                                    <DxGridDataColumn FieldName="Gen_7_1_DM" Caption="Názov lieku" ReadOnly="@isReadOnly" DataRowEditorVisible="@(!isReadOnly)">
                                        <EditSettings>
                                            <DxComboBoxSettings Data="@gen_7_1_DMAnswer" ValueFieldName="Id" TextFieldName="Name" />
                                        </EditSettings>
                                    </DxGridDataColumn>

                                    <DxGridDataColumn FieldName="Gen_7_2" Caption="Dávka (mg)" ReadOnly="@isReadOnly" DataRowEditorVisible="@(!isReadOnly)">
                                        <EditSettings>
                                            <DxSpinEditSettings MinValue="@(0m)" />
                                        </EditSettings>
                                    </DxGridDataColumn>

                                    <DxGridDataColumn FieldName="Gen_7_4" Caption="Dĺžka užívanie (v rokoch)" ReadOnly="@isReadOnly" DataRowEditorVisible="@(!isReadOnly)">
                                        <EditSettings>
                                            <DxSpinEditSettings MinValue="@(0m)" />
                                        </EditSettings>
                                    </DxGridDataColumn>

                                    <DxGridDataColumn FieldName="Gen_7_1_1" Visible="false" DataRowEditorVisible="@(!isReadOnly)">
                                        <EditSettings>
                                            <DxTextBoxSettings />
                                        </EditSettings>
                                    </DxGridDataColumn>

                                    <DxGridDataColumn FieldName="Gen_7_1_2" Visible="false" DataRowEditorVisible="@(!isReadOnly)">
                                        <EditSettings>
                                            <DxSpinEditSettings MinValue="@(0m)" />
                                        </EditSettings>
                                    </DxGridDataColumn>

                                    <DxGridDataColumn FieldName="Gen_7_1_4" Visible="false" DataRowEditorVisible="@(!isReadOnly)">
                                        <EditSettings>
                                            <DxSpinEditSettings MinValue="@(0m)" />
                                        </EditSettings>
                                    </DxGridDataColumn>

                                    <DxGridDataColumn FieldName="Id" AllowSort="false" Width="90px" MinWidth="100" TextAlignment="GridTextAlignment.Center">
                                        <CellDisplayTemplate Context="context">
                                            @if (context.DataItem is Data.RelationalTables.Gen7YesRelational Gen7)
                                            {
                                                if (Gen7.Gen_7_1_DM == 34)
                                                {
                                                    <DxButton IconCssClass="grid-toolbar-info" @onclick="() => ShowDetails(Gen7)" />
                                                }
                                            }
                                        </CellDisplayTemplate>
                                        <HeaderCaptionTemplate>
                                            <span>Detaily</span>
                                        </HeaderCaptionTemplate>
                                    </DxGridDataColumn>

                                    @if (!isReadOnly)
                                    {
                                        <DxGridCommandColumn Width="80px" NewButtonVisible="false">

                                            <CellDisplayTemplate Context="gridContext123">

                                                <div class="grid-cell-align-center">
                                                    <DxButton IconCssClass="grid-icon grid-icon-edit"
                                                    RenderStyle="ButtonRenderStyle.Link"
                                                    title="Upraviť"
                                                    Click="@(() => OnEditButtonClick((Data.RelationalTables.Gen7YesRelational)gridContext123.DataItem))" />

                                                    <DxButton IconCssClass="grid-icon grid-icon-delete"
                                                    RenderStyle="ButtonRenderStyle.Link"
                                                    title="Vymazať"
                                                    Click="@(() => Gen7YesGrid!.ShowRowDeleteConfirmation(gridContext123.VisibleIndex))" />
                                                </div>
                                            </CellDisplayTemplate>
                                        </DxGridCommandColumn>
                                    }

                                </Columns>

                                <EditFormTemplate Context="Gen7YesGridContext">
                                    @if (Gen7YesGridContext.EditModel is Data.RelationalTables.Gen7YesRelational gen7Yes)
                                    {
                                        currentEditModel = gen7Yes;
                                        <DxFormLayout>
                                            <DxFormLayoutItem Caption="Názov lieku:" ColSpanMd="12">
                                                <DxComboBox Value="@gen7Yes.Gen_7_1_DM"
                                                Data="@gen_7_1_DMAnswer"
                                                ValueFieldName="Id"
                                                TextFieldName="Name">
                                                    <ItemTemplate Context="item">
                                                        <text>
                                                            <div @onclick="() => OnComboBoxItemClicked(item.Id)">
                                                                @item.Name
                                                            </div>
                                                        </text>
                                                    </ItemTemplate>
                                                </DxComboBox>
                                            </DxFormLayoutItem>
                                        </DxFormLayout>

                                        @if (!isGen7_1_1)
                                        {
                                            <DxFormLayoutItem Caption="Dávka (mg):" ColSpanMd="12">
                                                @Gen7YesGridContext.GetEditor("Gen_7_2")
                                            </DxFormLayoutItem>

                                            <DxFormLayoutItem Caption="Dĺžka užívanie (v rokoch):" ColSpanMd="12">
                                                @Gen7YesGridContext.GetEditor("Gen_7_4")
                                            </DxFormLayoutItem>
                                        }

                                        @if (isGen7_1_1 && isGen7_1_DM)
                                        {
                                            <DxFormLayoutItem Caption="Názov lieku:">
                                                @Gen7YesGridContext.GetEditor("Gen_7_1_1")
                                            </DxFormLayoutItem>

                                            <DxFormLayoutItem Caption="Dávka (mg):">
                                                @Gen7YesGridContext.GetEditor("Gen_7_1_2")
                                            </DxFormLayoutItem>

                                            <DxFormLayoutItem Caption="Dĺžka užívanie (v rokoch):">
                                                @Gen7YesGridContext.GetEditor("Gen_7_1_4")
                                            </DxFormLayoutItem>
                                        }
                                    }
                                </EditFormTemplate>
                            </DxGrid>

                            <DxPopup @bind-Visible="@PopupVisible"
                            HeaderText="@PopupHeaderText"
                            HorizontalAlignment="HorizontalAlignment.Center"
                            VerticalAlignment="VerticalAlignment.Center"
                            CloseOnEscape="true"
                            CloseOnOutsideClick="true">
                                <div style="padding: 0px;">
                                    <p><strong>Iný názov lieku:</strong> @PopupOtherGen711</p>
                                    <p><strong>Iná dávka (v mg):</strong> @PopupOtherGen712</p>
                                    <p><strong>Iná dĺžka užívania (v rokoch):</strong> @PopupOtherGen714</p>
                                </div>
                            </DxPopup>
                        </div>
                    </div>
                }
                <div class="new-row">
                    <DxFormLayoutItem Caption="Dĺžka trvania ťažkostí (v mesiacoch)" ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical" CaptionCssClass="caption-styleH1">
                        <DxSpinEdit Value="@gen!.Gen_8" ValueChanged="@(EventCallback.Factory.Create<int>(this, (newValue) => SaveInbox(newValue, 7)))" ValueExpression="@(() => gen.Gen_8)" ShowValidationIcon="true" CssClass="form-item-full-width" ReadOnly="@isReadOnly" MinValue="0" />
                    </DxFormLayoutItem>
                </div>

                <div class="new-row" style="margin-top: 4%; margin-bottom: 7%;">
                    <DxFormLayoutItem Caption="Prvý príznak Parkinsonovej choroby " ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical" CaptionCssClass="caption-styleH1">
                        <DxListBox Data="@gen_9_DSAnswer"
                        TextFieldName="Name"
                        ValueFieldName="Id"
                        SelectionMode="ListBoxSelectionMode.Multiple"
                        ShowCheckboxes="@ShowCheckboxes"
                        style="flex-basis: 240px"
                        @bind-Values="@Gen_9_DSList"
                        ReadOnly="@isReadOnly">
                        </DxListBox>
                    </DxFormLayoutItem>

                    <DxFormLayoutItem ColSpanMd="12">
                        <div style="margin-top: 5px">
                            @if (!isReadOnly)
                            {
                                <DxButton SubmitFormOnClick="true"
                                Text="Uložiť"
                                RenderStyle="ButtonRenderStyle.Primary"
                                Enabled="true"
                                CssClass="grid-toolbar-save1-button"
                                IconCssClass="grid-toolbar-save1" />
                            }
                        </div>
                    </DxFormLayoutItem>
                </div>


                <DxFormLayoutItem Caption="Bol pacient už kvôli týmto príznakom vyšetrený .ortopédom, psychiatrom a pod.?" ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical" CaptionCssClass="caption-styleH1">
                    <InputRadioGroup @bind-Value="@gen!.Gen_10" class="d-flex flex-wrap">
                        @foreach (var item in gen_10_Answer)
                        {
                            <InputRadio class="m-2" Value="@item.Id" @onclick="async() => { await SaveInbox(item.Id, 9); AnswerChange(item.Id, 2); }" Disabled="@isReadOnly" /> @item.Name
                        }
                    </InputRadioGroup>
                </DxFormLayoutItem>

                @if (isGen10_1)
                {
                    <DxFormLayoutGroup Caption="Ak áno, ktorá špecializácia?" ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical">
                        <DxFormLayoutItem Caption="Špecializácia">
                            <DxComboBox NullText="Vyberte špecializáciu..."
                            Data="@gen_10_1_Answer"
                            TextFieldName="Name"
                            ValueFieldName="Id"
                            ReadOnly="@isReadOnly"
                            @bind-Value="@gen!.Gen_10_1"
                            ShowValidationIcon="true">
                                <ItemTemplate Context="item">
                                    <text>
                                        <div @onclick="async() => await OnComboBoxItemClickedGen101(item.Id)">
                                            @item.Name
                                        </div>
                                    </text>
                                </ItemTemplate>
                            </DxComboBox>
                        </DxFormLayoutItem>
                    </DxFormLayoutGroup>

                    @if (isGen10_1_1)
                    {
                        <div class="new-row" style="margin-left: 3%">
                            <DxFormLayoutGroup Caption="Iné..." ColSpanMd="12">

                                <DxFormLayoutItem Caption="Názov špecializácie">
                                    <DxTextBox NullText="Napíšte názov špecializácie..." Text="@gen!.Gen_10_1_1" TextChanged="@((string newValue) => TextChangeValue(newValue, 1))" TextExpression="@(() => gen!.Gen_10_1_1)" ShowValidationIcon="true" ReadOnly="@isReadOnly" />
                                </DxFormLayoutItem>
                            </DxFormLayoutGroup>
                        </div>
                    }
                }

                <DxFormLayoutItem Caption="Stal sa pacientovi pred objavením príznakov úraz hlavy?" ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical" CaptionCssClass="caption-styleH1">
                    <InputRadioGroup @bind-Value="@gen!.Gen_11" class="d-flex flex-wrap">
                        @foreach (var item in gen_11_Answer)
                        {
                            <InputRadio class="m-2" @onclick="async() => await SaveInbox(item.Id, 10)" Value="@item.Id" Disabled="@isReadOnly" /> @item.Name
                        }
                    </InputRadioGroup>
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="Celková anestézia pred objavením sa príznakov? " ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical" CaptionCssClass="caption-styleH1">
                    <InputRadioGroup @bind-Value="@gen!.Gen_12" class="d-flex flex-wrap">
                        @foreach (var item in gen_12_Answer)
                        {
                            <InputRadio class="m-2" @onclick="async() => await SaveInbox(item.Id, 11)" Value="@item.Id" Disabled="@isReadOnly" /> @item.Name
                        }
                    </InputRadioGroup>
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="U pacienta je podozrenie na:" ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical" CaptionCssClass="caption-styleH1">
                    <InputRadioGroup @bind-Value="@gen!.Gen_13">
                        @foreach (var item in gen_13_Answer)
                        {
                            <label class="d-block m-2">
                                <InputRadio Value="@item.Id" @onclick="async() => {await SaveInbox(item.Id, 12); AnswerChange(item.Id, 3);}" Disabled="@isReadOnly" /> @item.Name
                            </label>
                        }
                    </InputRadioGroup>
                </DxFormLayoutItem>

                @if (isGen13_1)
                {
                    <DxFormLayoutGroup Caption="Iný parkinsonský syndróm " ColSpanMd="12">
                        <DxFormLayoutItem Caption="Uveďte">
                            <DxTextBox NullText="Napíšte iný..." Text="@gen!.Gen_13_1" TextChanged="@((string newValue) => TextChangeValue(newValue, 2))" TextExpression="@(() => gen!.Gen_13_1)" ShowValidationIcon="true" ReadOnly="@isReadOnly" />
                        </DxFormLayoutItem>
                    </DxFormLayoutGroup>

                }
            </DxFormLayoutGroup>
        </DxFormLayout>
    </EditForm>

</div>

@code {
    [Parameter]
    public Guid questionnaireId { get; set; }

    public string QuestionnaireIdAsString => questionnaireId.ToString();

    string PopupHeaderText { get; set; } = "Details";
    string PopupOtherGen711 { get; set; } = string.Empty;
    string PopupOtherGen712 { get; set; } = string.Empty;
    string PopupOtherGen714 { get; set; } = string.Empty;

    bool ShowCheckboxes { get; set; } = true;
    bool isGen7_1_DM = false;
    bool isGen7_1_1 = false;
    bool isGen10_1 = false;
    bool isGen13_1 = false;
    bool isGen10_1_1 = false;
    bool isXSmallScreen;

    bool isReadOnly = false;
    bool showErrorIcon = false;
    bool PopupVisible { get; set; } = false;
    bool BatchItemsEnabled => UnsavedChanges.Count > 0 || Gen7YesGrid!.IsEditing();
    private bool preventDoubleSave = false;

    private QuestionnaireProgressBar QuestionnaireProgressBarRef;

    private List<int> selectedValues = new List<int>();
    private Data.RelationalTables.Gen7YesRelational? currentEditModel;

    Dictionary<Data.RelationalTables.Gen7YesRelational, DataChange> UnsavedChanges { get; } = new();

    IGrid? Gen7YesGrid { get; set; }

    Data.Questionnaires.QuestionnaireGeneral01? gen;

    List<Data.Dials.DialQGeneral> dialQGenerals = new();
    List<Data.Dials.DialQGeneral> gen_2_DGAnswer = new(); //Pohlavie
    List<Data.Dials.DialQGeneral> gen_3_DGAnswer = new(); //Rodinný stav
    List<Data.Dials.DialQGeneral> gen_4_DGAnswer = new(); //Pracovný pomer
    List<Data.Dials.DialQGeneral> gen_5_DGAnswer = new(); //Fajčenie
    List<Data.Dials.DialQGeneral> gen_6_DGAnswer = new(); //Pozitívna rodinná anamnéza Parkinsonovej choroby

    List<Data.Dials.DialQGeneral> gen_7_DGAnswer = new(); //Anamnéza užívania antipsychotík
    List<Data.Dials.DialQGeneral> gen_7_1_DMAnswer = new(); //Názov lieku
    List<Data.Dials.DialQGeneral> gen_7_3_DU_Answer = new();
    List<Data.Dials.DialQGeneral> gen_7_1_3_DUAnswer = new(); //Jednotka (ine)

    List<Data.Dials.DialQGeneral> gen_9_DSAnswer = new(); //Prvý príznak Parkinsonovej choroby
    List<Data.Dials.DialQGeneral> gen_10_Answer = new(); //Bol pacient už kvôli tomuto príznaku vyšetrený .ortopédom, psychiatrom a pod.?
    List<Data.Dials.DialQGeneral> gen_10_1_Answer = new(); //Ak áno, ktorá špecializácia?
    List<Data.Dials.DialQGeneral> gen_10_1_1_Answer = new();

    List<Data.Dials.DialQGeneral> gen_11_Answer = new(); //Stal sa pacientovi pred objavením príznaku úraz hlavy?
    List<Data.Dials.DialQGeneral> gen_12_Answer = new(); //Celková anestézia pred objavením sa príznaku?

    List<Data.Dials.DialQGeneral> gen_13_Answer = new(); //Pacientovi je diagnostikované/je podozrenie na

    List<Data.RelationalTables.Gen7YesRelational> Gen7YesTable { get; set; }

    IEnumerable<int> Gen_9_DSList = new List<int>();


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.IsInRole("Office"))
        {
            isReadOnly = true;
        }

        gen = new Data.Questionnaires.QuestionnaireGeneral01
            {
                Questionnaire_id = QuestionnaireIdAsString,
            };

        //DialQGeneral
        dialQGenerals = await Q01Service.GetDialQGeneralsAsync();
        gen_2_DGAnswer = dialQGenerals.Where(d => d.Type_q == 1).ToList();
        gen_3_DGAnswer = dialQGenerals.Where(d => d.Type_q == 2).ToList();
        gen_4_DGAnswer = dialQGenerals.Where(d => d.Type_q == 3).ToList();
        gen_5_DGAnswer = dialQGenerals.Where(d => d.Type_q == 4).ToList();
        gen_6_DGAnswer = dialQGenerals.Where(d => d.Type_q == 5).ToList();

        gen_7_DGAnswer = dialQGenerals.Where(d => d.Type_q == 6).ToList();

        gen_7_1_DMAnswer = dialQGenerals.Where(d => d.Type_q == 7).OrderBy(d => d.Name == "Iné..." ? 1 : 0).ThenBy(d => d.Name).ToList();

        gen_7_3_DU_Answer = dialQGenerals.Where(d => d.Type_q == 8).ToList();
        gen_7_1_3_DUAnswer = dialQGenerals.Where(d => d.Type_q == 8).ToList();

        gen_9_DSAnswer = dialQGenerals.Where(d => d.Type_q == 9).OrderBy(d => d.Name == "Iné..." ? 1 : 0).ThenBy(d => d.Name).ToList();

        gen_10_Answer = dialQGenerals.Where(d => d.Type_q == 5).ToList();
        gen_10_1_Answer = dialQGenerals.Where(d => d.Type_q == 10).OrderBy(d => d.Name == "Iná..." ? 1 : 0).ThenBy(d => d.Name).ToList();

        gen_11_Answer = dialQGenerals.Where(d => d.Type_q == 5).ToList();
        gen_12_Answer = dialQGenerals.Where(d => d.Type_q == 5).ToList();

        gen_13_Answer = dialQGenerals.Where(d => d.Type_q == 11).ToList();

        await LoadQuestionnaire(QuestionnaireIdAsString);
    }


    //Edit Form
    #region "Settings EditForm"
    private async Task HandleValidSubmit()
    {
        if (preventDoubleSave)
            return;

        if (!isReadOnly)
        {
            preventDoubleSave = true;
            int previousPercentage = gen!.ProgressPercentage;
            await Q01Service.SaveQuestionnaireGeneral01Async(gen);
            await Q01Service.SaveGen9DSRelationAsync(gen.Id, Gen_9_DSList.Cast<int?>());
            if (QuestionnaireProgressBarRef != null)
            {
                await QuestionnaireProgressService.UpdateProgressAsync(QuestionnaireIdAsString);
                await QuestionnaireProgressBarRef.RefreshDataAsync(previousPercentage, 100);
            }
            AddToast();
            preventDoubleSave = false;
        }
    }

    private async Task LoadQuestionnaire(string questionnaireId)
    {
        var questionnaire = await Q01Service.GetQuestionnaireGeneral01ByQuestionnaireIdAsync(questionnaireId);
        if (questionnaire != null)
        {
            gen = questionnaire;

            isGen7_1_DM = (gen.Gen_7_DG == 16);
            isGen10_1_1 = (gen.Gen_10_1 == 57);
            isGen10_1 = (gen.Gen_10 == 14);
            isGen13_1 = (gen.Gen_13 == 55);

            Gen_9_DSList = await Q01Service.LoadSelectedGen9DSAsync(gen.Id);
            Gen7YesTable = await Q01Service.LoadGen7YesTableAsync(gen.Id);
        }
    }

    private void AddToast()
    {
        ToastService.ShowToast(new ToastOptions
            {
                ProviderName = "Overview",
                Title = "Stav úspešne uložený",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Success,
            });
    }
    #endregion

    #region "Settings Change in EditForm"

    void ShowColumnChooser()
    {
        Gen7YesGrid.ShowColumnChooser(new DialogDisplayOptions($".flexGrid", HorizontalAlignment.Center, VerticalAlignment.Center));
    }

    void AnswerChange(int value, int index)
    {
        switch (index)
        {
            case 1:
                gen!.Gen_7_DG = value;
                isGen7_1_DM = (gen.Gen_7_DG == 16);
                break;
            case 2:
                gen!.Gen_10 = value;
                isGen10_1 = (gen.Gen_10 == 14);
                break;
            case 3:
                gen!.Gen_13 = value;
                isGen13_1 = (gen.Gen_13 == 55);
                break;
        }
    }

    void OnComboBoxItemClicked(int id)
    {
        if (currentEditModel != null)
        {
            currentEditModel.Gen_7_1_DM = id;
        }

        isGen7_1_1 = (id == 34);
    }

    async Task OnComboBoxItemClickedGen101(int id)
    {

        isGen10_1_1 = (id == 57);
        gen!.Gen_10_1 = id;
        await HandleValidSubmit();
    }

    async Task DateChangeValue(DateTime date)
    {
        gen!.Gen_1 = date;
        await HandleValidSubmit();
    }

    async Task SaveInbox(int value, int genIndex)
    {
        switch (genIndex)
        {
            case 1:
                gen!.Gen_2_DG = value;
                break;
            case 2:
                gen!.Gen_3_DG = value;
                break;
            case 3:
                gen!.Gen_4_DG = value;
                break;
            case 4:
                gen!.Gen_5_D = value;
                break;
            case 5:
                gen!.Gen_6_DG = value;
                break;
            case 6:
                gen!.Gen_7_DG = value;
                await HandleValidSubmit();
                NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
                break;
            case 7:
                gen!.Gen_8 = value;
                break;
            case 9:
                gen!.Gen_10 = value;
                break;
            case 10:
                gen!.Gen_11 = value;
                break;
            case 11:
                gen!.Gen_12 = value;
                break;
            case 12:
                gen!.Gen_13 = value;
                break;
            default:
                throw new ArgumentException("Neznámy index gen");

        }
        await HandleValidSubmit();
    }

    async Task TextChangeValue(string value, int index)
    {
        switch (index)
        {
            case 1:
                gen!.Gen_10_1_1 = value;
                await HandleValidSubmit();
                break;
            case 2:
                gen!.Gen_13_1 = value;
                await HandleValidSubmit();
                break;
        }
    }
    #endregion

    #region "Settings Grid"
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        var gen7Yes = (Data.RelationalTables.Gen7YesRelational)e.EditModel;

        if (e.IsNew)
        {
            await Q01Service.SaveGen7YesRelationAsync(gen!.Id, gen7Yes);
        }
        else
        {
            await Q01Service.SaveGen7YesRelationAsync(gen!.Id, gen7Yes);
        }
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        currentEditModel = null;

    }

    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        var gen7Yes = (Data.RelationalTables.Gen7YesRelational)e.DataItem;
        await Q01Service.DeleteGen7YesAsync(gen7Yes.Id);
        Gen7YesGrid!.Reload();
    }

    async Task New_Click() => await Gen7YesGrid!.StartEditNewRowAsync();

    private void OnCustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (e.EditModel == null)
        {
            e.EditModel = new Data.RelationalTables.Gen7YesRelational();
        }
    }

    private void ShowDetails(Data.RelationalTables.Gen7YesRelational Gen7Detail)
    {
        if (Gen7Detail != null)
        {
            PopupVisible = true;
            PopupHeaderText = $"Detail záznamu";
            PopupOtherGen711 = Gen7Detail.Gen_7_1_1 ?? "N/A";
            PopupOtherGen712 = Gen7Detail.Gen_7_1_2.HasValue ? Gen7Detail.Gen_7_1_2.Value.ToString() : "N/A";
            PopupOtherGen714 = Gen7Detail.Gen_7_1_4.HasValue ? Gen7Detail.Gen_7_1_4.Value.ToString() : "N/A";
        }
    }

    async Task OnEditButtonClick(Data.RelationalTables.Gen7YesRelational selectedItem)
    {
        if (selectedItem.Gen_7_1_DM != 34)
        {
            isGen7_1_1 = false;
        }
        else
        {
            isGen7_1_1 = true;
        }

        await Gen7YesGrid!.StartEditDataItemAsync(selectedItem);
    }
    #endregion

    record DataChange(DataChangeType Type, HashSet<string> ChangedFields);
    enum DataChangeType { Modification, Addition, Delete }
}