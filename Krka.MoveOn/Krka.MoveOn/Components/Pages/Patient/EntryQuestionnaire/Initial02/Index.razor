@page "/entryQ/init/{questionnaireId:guid}"
@using DevExpress.Blazor.Internal
@using Krka.MoveOn.Data.Questionnaires
@using Krka.MoveOn.Services.Questionnaires
@using Krka.MoveOn.Components.Pages.Patient.EntryQuestionnaire.Components
@using Krka.MoveOn.Components.Pages.Patient.Components
@using Microsoft.AspNetCore.Authorization
@using Krka.MoveOn.Components.Pages.Components

@attribute [Authorize]
@attribute [StreamRendering(true)]
@rendermode InteractiveServer
@inject QuestionnaireProgressService QuestionnaireProgressService

<PageTitle>MoveOn - Začiatočná liečba P</PageTitle>


<div class="d-flex align-items-center custom-toast-background">
    <DxToastProvider Name="Overview"
                     MaxToastCount="3"
                     AnimationType="ToastAnimationType.Slide"
                     HorizontalAlignment="HorizontalAlignment.Right"
                     VerticalAlignment="VerticalEdge.Top"
                     Width="320px" />
</div>

<div class="cw-880 mo-main-layout">
    <_EntryBtn />

    <QuestionnaireProgressBar questionnaireId="@QuestionnaireIdAsString" @ref="QuestionnaireProgressBarRef" />

    <div class="mo-caption-styleH3">
        Začiatočná liečba Parkinsonovej choroby
    </div>

    <Initial02Table questionnaireId="@QuestionnaireIdAsString" OnSave="HandleTableSaved" />
</div>


@code {
    [Parameter]
    public Guid questionnaireId { get; set; }
    private bool IsInfoOpen = true;


    public string QuestionnaireIdAsString => questionnaireId.ToString();

    private QuestionnaireProgressBar QuestionnaireProgressBarRef;

    private async Task HandleTableSaved((int PreviousProgress, int CurrentProgress) progressData)
    {
        if (QuestionnaireProgressBarRef != null)
        {
            await QuestionnaireProgressService.UpdateProgressAsync(QuestionnaireIdAsString);
            await QuestionnaireProgressBarRef.RefreshDataAsync(progressData.PreviousProgress, progressData.CurrentProgress);
        }
    }
}