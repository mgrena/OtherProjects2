@page "/entryQ/init/{questionnaireId:guid}"
@using DevExpress.Blazor.Internal
@using Krka.MoveOn.Data.Questionnaires
@using Krka.MoveOn.Services.Questionnaires
@using Krka.MoveOn.Components.Pages.Patient.EntryQuestionnaire.Components
@using Krka.MoveOn.Components.Pages.Patient.Components
@using Microsoft.AspNetCore.Authorization
@using Krka.MoveOn.Components.Pages.Components

@attribute [Authorize]
@attribute [StreamRendering(true)]
@rendermode InteractiveServer
@inject QuestionnaireProgressService QuestionnaireProgressService

<PageTitle>MoveOn - Začiatočná liečba P</PageTitle>


<div class="d-flex align-items-center custom-toast-background">
    <DxToastProvider Name="Overview"
                     MaxToastCount="3"
                     AnimationType="ToastAnimationType.Slide"
                     HorizontalAlignment="HorizontalAlignment.Right"
                     VerticalAlignment="VerticalEdge.Top"
                     Width="320px" />
</div>

<div class="cw-880" style="width: 70%; margin: 0 auto;">
    <_EntryBtn />

    <QuestionnaireProgressBar questionnaireId="@QuestionnaireIdAsString" @ref="QuestionnaireProgressBarRef" />

    <div style="background-color: #f2f2f2; color: #363c41; border-radius: 2px; text-align: left; font-weight: bold; display:flex; margin-top:5px;">
        <div style="margin-right: 2px;">
            <DxButton CssClass="info-icon-btn" Click="() => IsInfoOpen = !IsInfoOpen" IconCssClass="grid-toolbar-info" RenderStyle="ButtonRenderStyle.None" />
        </div>
        <DxFlyout @bind-IsOpen="@IsInfoOpen"
                  PositionTarget=".info-icon-btn"
                  Position="FlyoutPosition.Bottom"
                  PreventCloseOnPositionTargetClick="true"
                  Width="240">
            Keď pridávate účinné látky, nezabudnite uložiť záznamy kliknutím na tlačidlo <b>“Uložiť”</b>
        </DxFlyout>
        Začiatočná liečba Parkinsonovej choroby
    </div>

    <Initial02Table questionnaireId="@QuestionnaireIdAsString" OnSave="HandleTableSaved" />
</div>


@code {
    [Parameter]
    public Guid questionnaireId { get; set; }
    private bool IsInfoOpen = true;


    public string QuestionnaireIdAsString => questionnaireId.ToString();

    private QuestionnaireProgressBar QuestionnaireProgressBarRef;

    private bool isProgressComplete = false;
    private async Task HandleTableSaved((int PreviousProgress, int CurrentProgress) progressData)
    {
        if (progressData.CurrentProgress == 100 && isProgressComplete)
        {
            return;
        }

        if (QuestionnaireProgressBarRef != null)
        {
            await QuestionnaireProgressService.UpdateProgressAsync(QuestionnaireIdAsString);
            await QuestionnaireProgressBarRef.RefreshDataAsync(progressData.PreviousProgress, progressData.CurrentProgress);

            if (progressData.CurrentProgress == 100)
            {
                isProgressComplete = true;
            }
        }
    }

}