@page "/resultQ/satisfaction/{questionnaireId:guid}"

@using Krka.MoveOn.Services.Questionnaires
@using Krka.MoveOn.Components.Pages.Patient.ResultQuestionnaire.Components
@using Krka.MoveOn.Components.Pages.Patient.Components
@using Krka.MoveOn.Data.Questionnaires
@using Microsoft.AspNetCore.Authorization
@using Krka.MoveOn.Components.Pages.Components

@attribute [Authorize]
@attribute [StreamRendering(true)]
@rendermode InteractiveServer

@inject Satisfaction10Service SatisfactionService
@inject IToastNotificationService ToastService
@inject QuestionnaireProgressService QuestionnaireProgressService


<PageTitle>MoveOn - MDS-UPDRS škála </PageTitle>

<div class="cw-880" style="width: 70%; margin: 0 auto;">
    <_ResultBtn />
    <QuestionnaireProgressBar questionnaireId="@QuestionnaireIdAsString" @ref="QuestionnaireProgressBarRef" />

    <Satisfaction10Form questionnaireId="@QuestionnaireIdAsString" OnSave="HandleTableSaved" />

</div>






@code {
    [Parameter]
    public Guid questionnaireId { get; set; }

    public string QuestionnaireIdAsString => questionnaireId.ToString();

    private QuestionnaireProgressBar QuestionnaireProgressBarRef;

    private async Task HandleTableSaved((int PreviousProgress, int CurrentProgress) progressData)
    {
        if (QuestionnaireProgressBarRef != null)
        {
            await QuestionnaireProgressService.UpdateProgressAsync(QuestionnaireIdAsString);
            await QuestionnaireProgressBarRef.RefreshDataAsync(progressData.PreviousProgress, progressData.CurrentProgress);
        }
    }

}

