@page "/patients/"

@using Krka.MoveOn.Data
@using Krka.MoveOn.Services
@using Krka.MoveOn.Services.Questionnaires
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Localization
@using Krka.MoveOn.Resources;
@using System.Globalization


@attribute [Authorize(Roles = "Admin, Doctor, Office")]
@attribute [StreamRendering(true)]

@rendermode InteractiveServer

@inject IStringLocalizer<Patient> localizer
@inject PatientService PatientService
@inject QuestionnaireService QuestionnaireService
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IToastNotificationService ToastService

@inject ProtectedSessionStorage SessionStorage

<div class="d-flex align-items-center custom-toast-background">
    <DxToastProvider Name="Overview"
                     MaxToastCount="3"
                     AnimationType="ToastAnimationType.Slide"
                     HorizontalAlignment="HorizontalAlignment.Right"
                     VerticalAlignment="VerticalEdge.Top"
                     Width="320px" />
</div>


<div style="display: flex; justify-content: space-between; width: 100%;">
    <div style="width: 52%;">

        <PageTitle>Welcome</PageTitle>

        <div style="background-color: #f2f2f2; color: #363c41; padding: 5px; border-radius: 2px; text-align: left; font-weight: bold;">
            Pacienti
        </div>
        <DxGrid @ref="patientsGrid"
                Data="Patients"
                PageSize="20"
                PagerPosition="GridPagerPosition.Bottom"
                PageSizeSelectorVisible="true"
                PageSizeSelectorItems="@(new int[] { 10, 20, 100 })"
                PageSizeSelectorAllRowsItemVisible="true"
                PagerSwitchToInputBoxButtonCount="10"
                PagerVisibleNumericButtonCount="10"
                KeyFieldName="Id"
                ValidationEnabled="false"
                EditMode="GridEditMode.EditForm"
                FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                ColumnResizeMode="GridColumnResizeMode.NextColumn"
                TextWrapEnabled="false"
                HighlightRowOnHover="true"
                EditModelSaving="Grid_EditModelSaving"
                CustomizeEditModel="Grid_CustomizeEditModel_New"                
                DataItemDeleting="Grid_DataItemDeleting"
                FocusedRowEnabled ="true"
                FocusedRowChanged="OnFocusedRowChanged"> 

            <ToolbarTemplate Context="toolbarContext">
                <DxToolbar ItemRenderStyleMode="ToolbarRenderStyleMode.Plain">
                    <DxToolbarItem Text="Pridať pacienta" Click="New_Click" Enabled="true">
                        <img src="images/newPatient.svg" width="24" height="24" alt="Pridať" />
                        <span style="margin-left: 2px">Pridať pacienta</span>
                    </DxToolbarItem>
                </DxToolbar>
            </ToolbarTemplate>

            <Columns>
                <DxGridDataColumn FieldName="PatientCode" Caption="Identifikačný kód pacienta" />
                <DxGridDataColumn FieldName="CreatedAt" Caption="Vytvorený" />

                <DxGridCommandColumn Width="30px" NewButtonVisible="false">
                    <CellDisplayTemplate Context="gridContext">
                        <div class="grid-cell-align-center">
                            <DxButton IconCssClass="grid-icon grid-icon-delete"
                                      RenderStyle="ButtonRenderStyle.Link"                                     
                                      aria-label="Delete"
                                      Click="@(() => patientsGrid.ShowRowDeleteConfirmation(gridContext.VisibleIndex))">
                                <img src="images/delete.svg" width="20" height="20" alt="Vymazať"  />
                            </DxButton>
                         
                        </div>
                    </CellDisplayTemplate>
                    <CellEditTemplate Context="editContext">
                        <div class="grid-cell-align-center">
                            <DxButton Enabled="false"
                                      aria-label="Delete"
                                      CssClass="grid-disabled-button"
                                      IconCssClass="grid-icon grid-icon-delete"
                                      RenderStyle="ButtonRenderStyle.Link"
                                      />

                        </div>
                    </CellEditTemplate>
                </DxGridCommandColumn>
            </Columns>

            <EditFormTemplate Context="editFormContext">
                <DxFormLayout>
                    <DxFormLayoutItem Caption="Identifikačný kód pacienta">
                        @editFormContext.GetEditor("PatientCode")
                    </DxFormLayoutItem>  
                </DxFormLayout>
            </EditFormTemplate>
        </DxGrid>
    </div>



    <div style="width: 45%">
        <div style="background-color: #f2f2f2; color: #363c41; padding: 5px; border-radius: 2px; text-align: left; font-weight: bold;">
            Vybraný pacient
        </div>
        <div class="simple-table" style=" border: 1px solid black; border-color: #dfdfdf; border-bottom: none; padding: 10px;">
            <div style="border-bottom: 1px solid black; border-color: black; font-weight: initial; margin-bottom: 6px;">
                Pacient č.  <span style="color:#6e7de8; font-weight: bold;">@selectedPatientCode</span>

            </div>
            <div style="border-bottom: 1px solid black; border-color: black; font-weight: initial; margin-bottom: 6px;">
                Udalosti
            </div>
            <div class="simple-table" style="border: 1px solid black; border-color: #dfdfdf; border-bottom: none; padding: 10px;">
                @if (hasQuestionnaires)
                {
                    @foreach (var questionnaire in Questionnaires)
                    {
                        <div style="margin-bottom: 6px;">
                            <DxMenu Orientation="@Orientation.Horizontal" CssClass="menu">
                                <Items>
                                    <DxMenuItem NavigateUrl="@GetNavigateUrl(questionnaire.Order, questionnaire.Id)"
                                                Text="@GetMenuText(questionnaire.Order)"
                                                @onclick="() => SetCurrentId(questionnaire.Id)" />
                                </Items>
                            </DxMenu>
                        </div>
                    }
                }
                else
                {
                    <p style="color: red">Žiadne dotazníky nie sú k dispozícii pre tohto pacienta.</p>
                }
            </div>

            @code {

                /// <summary>
                /// Zachytenie aktualnej Questionnaire_id
                /// </summary>
                /// <param name="id"></param>
                /// <returns></returns>
                private async Task SetCurrentId(int id)
                {
                    await SessionStorage.SetAsync("currentId", id);
                }


                private string GetNavigateUrl(Data.Questionnaires.Questionnaire.QuestionnaireOrderEnum order, int id)
                {
                    return order switch
                    {
                        Data.Questionnaires.Questionnaire.QuestionnaireOrderEnum.entry => $"/entryQ/gen/{id}",
                        Data.Questionnaires.Questionnaire.QuestionnaireOrderEnum.ongoing => $"/ongoingQ/init/{id}",
                        Data.Questionnaires.Questionnaire.QuestionnaireOrderEnum.result => $"/EntryQuestionnaire/GeneralQ/{id}",
                        _ => "/"
                    };
                }

                private string GetMenuText(Data.Questionnaires.Questionnaire.QuestionnaireOrderEnum order)
                {
                    return order switch
                    {
                        Data.Questionnaires.Questionnaire.QuestionnaireOrderEnum.entry => "1. Vstupný klinický dotazník",
                        Data.Questionnaires.Questionnaire.QuestionnaireOrderEnum.ongoing => "2. Priebežný klinický dotazník",
                        Data.Questionnaires.Questionnaire.QuestionnaireOrderEnum.result => "3. Výstupný klinický dotazník",
                        _ => "Unknown"
                    };
                }
            }


        </div>
    </div>


</div>



@code {
    IGrid patientsGrid { get; set; }
    public List<Data.Patient> Patients { get; set; }
    public List<Data.Questionnaires.Questionnaire> Questionnaires { get; set; }

    private string? selectedPatientCode;
    private int? selectedPatientId;
    private bool hasQuestionnaires; 

    protected override async Task OnInitializedAsync()
    {
        Patients = await PatientService.GetPatientsAsync();
    }

    /// <summary>
    /// Nacitanie Id aktualneho pouzivatela
    /// </summary>
    /// <returns></returns>
    async Task<string> GetCurrentUserIdAsync()
    {
        var user = await UserManager.GetUserAsync(SignInManager.Context.User);
        if (user != null)
        {
            return user.Id;
        }
        return null;
    }

    /// <summary>
    /// Notifikacia
    /// </summary>
    private void DeleteToast()
    {
        ToastService.ShowToast(new ToastOptions
            {
                ProviderName = "Overview",
                Title = "Pacient bol úspešne odstránený",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Success,
            });
    }

    /// <summary>
    /// Notifikacia
    /// </summary>
    private void AddToast()
    {
        ToastService.ShowToast(new ToastOptions
            {
                ProviderName = "Overview",
                Title = "Pacient bol úspešne pridaný",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Success,
            });
    }

    /// <summary>
    /// Reload Grid
    /// </summary>
    /// <returns></returns>
    async Task UpdateDataAsync()
    {
        Patients = await PatientService.GetPatientsAsync();
        patientsGrid.Reload();
    }


    /// <summary>
    /// Otvorenie editForm
    /// </summary>
    /// <returns></returns>
    async Task New_Click() => await patientsGrid.StartEditNewRowAsync();

    /// <summary>
    /// Nastavenie objektov
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    async Task Grid_CustomizeEditModel_New(GridCustomizeEditModelEventArgs e)
    {
        if (e.IsNew)
        {
            var newPatient = (Data.Patient)e.EditModel;
            newPatient.UserId = await GetCurrentUserIdAsync();
            newPatient.CreatedAt = DateTime.Now;
            newPatient.ModifiedAt = DateTime.Now;
        }
    }
    
    void Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (e.IsNew)
        {
            var newPatient = (Data.Patient)e.EditModel;
            newPatient.PatientCode = "newCode";
            newPatient.CreatedAt = DateTime.Now;
        }
    }

    /// <summary>
    /// Ulozenie do DB
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        var patient = (Data.Patient)e.EditModel;
        if (e.IsNew)
        {
            await PatientService.SavePatientAsync(patient);

            // Vytvorenie 3 sekcii dotazníkov (Vstupny, prebiehajúci, Vystupni)
            var questionnaires = new List<Data.Questionnaires.Questionnaire>
            {
                new Data.Questionnaires.Questionnaire
                {
                    PatientId = patient.Id,
                    Date = DateTime.Now,
                    Order = Data.Questionnaires.Questionnaire.QuestionnaireOrderEnum.entry,
                    CreatedAt = DateTime.Now,
                    ModifiedAt = DateTime.Now
                },
                new Data.Questionnaires.Questionnaire
                {
                    PatientId = patient.Id,
                    Date = DateTime.Now,
                    Order = Data.Questionnaires.Questionnaire.QuestionnaireOrderEnum.ongoing,
                    CreatedAt = DateTime.Now,
                    ModifiedAt = DateTime.Now
                },
                new Data.Questionnaires.Questionnaire
                {
                    PatientId = patient.Id,
                    Date = DateTime.Now,
                    Order = Data.Questionnaires.Questionnaire.QuestionnaireOrderEnum.result,
                    CreatedAt = DateTime.Now,
                    ModifiedAt = DateTime.Now
                }
            };

            foreach (var questionnaire in questionnaires)
            {
                await QuestionnaireService.SaveQuestionnaireAsync(questionnaire);
            }
        }
        await UpdateDataAsync();
        AddToast();
    }




    /// <summary>
    /// Nastavenie objektu "DeletedAt" 
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        var patient = (Data.Patient)e.DataItem;
        await PatientService.DeletePatientAsync(patient.Id);
        await UpdateDataAsync();
        DeleteToast();
    }



    /// <summary>
    /// Nacitanie dotaznikov podla daneho pacienta
    /// </summary>
    /// <param name="patientId"></param>
    /// <returns></returns>
    private async Task LoadQuestionnairesAsync(int patientId)
    {
        var questionnaires = await QuestionnaireService.GetQuestionnairesByPatientIdAsync(patientId);
        hasQuestionnaires = questionnaires.Any(); // ak obsahuje polozky
        Questionnaires = hasQuestionnaires ? questionnaires : new List<Data.Questionnaires.Questionnaire>(); 
    }


    /// <summary>
    /// Zmena focusnuteho riadku 
    /// </summary>
    /// <param name="e"></param>
    private async void OnFocusedRowChanged(GridFocusedRowChangedEventArgs e)
    {
        var patient = e.DataItem as Data.Patient;
        selectedPatientCode = patient?.PatientCode;
        selectedPatientId = patient?.Id;

        if (selectedPatientId.HasValue)
        {
            await LoadQuestionnairesAsync(selectedPatientId.Value);
            StateHasChanged(); //Aktualizacia, vykreslenie noveho obsahu
        }
    }
}


