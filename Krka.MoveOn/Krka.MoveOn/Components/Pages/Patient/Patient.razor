@page "/patients"

@using Krka.MoveOn.Data
@using Krka.MoveOn.Services
@using Krka.MoveOn.Services.Pages
@using Krka.MoveOn.Services.Questionnaires
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Localization
@using Krka.MoveOn.Resources;
@using System.Globalization
@using System.IdentityModel.Claims
@using System.Text.RegularExpressions

@attribute [Authorize]
@attribute [StreamRendering(true)]

@rendermode @(new InteractiveServerRenderMode(false))

@inject IStringLocalizer<Patient> localizer
@inject PatientService PatientService
@inject QuestionnaireService QuestionnaireService
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IToastNotificationService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ProtectedSessionStorage SessionStorage
@inject ILogger<Patient> Logger
@inject IHttpContextAccessor HttpContextAccessor

<div class="d-flex align-items-center custom-toast-background">
    <DxToastProvider Name="Overview"
                     MaxToastCount="3"
                     AnimationType="ToastAnimationType.Slide"
                     HorizontalAlignment="HorizontalAlignment.Right"
                     VerticalAlignment="VerticalEdge.Top"
                     Width="320px" />
</div>


<div class="flex-container" style="display: flex; justify-content: space-between; width: 100%;">
    <div class="first-div" style="width: 52%;">

        <PageTitle>Pacienti</PageTitle>
        @if (isAdminOrOffice)
        {
            <div class="mo-caption-styleH3">
                Pacienti (@PatientService.PatientCount)
            </div>
        }
        else
        {
            <div class="mo-caption-styleH3">
                Pacienti (@PatientService.PatientCount/20)
            </div>
        }

        <DxGrid @ref="patientsGrid"
                Data="Patients"
                PageSize="20"
                PagerPosition="GridPagerPosition.Bottom"
                PageSizeSelectorVisible="true"
                PageSizeSelectorItems="@(new int[] { 10, 20, 100 })"
                PageSizeSelectorAllRowsItemVisible="true"
                PagerSwitchToInputBoxButtonCount="10"
                PagerVisibleNumericButtonCount="10"
                KeyFieldName="Id"
                ValidationEnabled="true"
                EditMode="GridEditMode.PopupEditForm"
                FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                ColumnResizeMode="GridColumnResizeMode.NextColumn"
                PopupEditFormHeaderText="Pridať pacienta"
                TextWrapEnabled="false"
                HighlightRowOnHover="true"
                EditModelSaving="Grid_EditModelSaving"
                CustomizeEditModel="Grid_CustomizeEditModel_New"
                DataItemDeleting="Grid_DataItemDeleting"
                CustomizeElement="Grid_CustomizeElement"
                FocusedRowEnabled="true"
                FocusedRowChanged="OnFocusedRowChanged">

            <ToolbarTemplate Context="toolbarContext">
                <DxToolbar ItemRenderStyleMode="ToolbarRenderStyleMode.Plain">
                    <DxToolbarItem Text="Pridať pacienta" Click="New_Click" Enabled="true" IconCssClass="grid-toolbar-patient" />
                </DxToolbar>
            </ToolbarTemplate>

            <Columns>
                <DxGridDataColumn FieldName="PatientCode" Caption="Identifikačný kód pacienta" />
                <DxGridDataColumn FieldName="CreatedAt" Caption="Vytvorený" />
                @if (isAdminOrOffice)
                {
                    <DxGridDataColumn FieldName="Doctor" Caption="Lekár" TextAlignment="GridTextAlignment.Center" />
                }
                <DxGridDataColumn FieldName="Valid" Caption="Stav pacienta" TextAlignment="GridTextAlignment.Center" />

                <DxGridDataColumn>
                    <CellDisplayTemplate Context="gridContext">
                        <div style="display: flex; flex-direction: column; gap: 10px; align-items: center;">
                            <Krka.MoveOn.Components.Pages.Components.ProgressBar ProgressPercentage="@(((Data.Patient)(gridContext.DataItem))?.EntryProgressPercentage ?? 0)" />
                            <Krka.MoveOn.Components.Pages.Components.ProgressBar ProgressPercentage="@(((Data.Patient)(gridContext.DataItem))?.OngoingProgressPercentage ?? 0)" />
                            <Krka.MoveOn.Components.Pages.Components.ProgressBar ProgressPercentage="@(((Data.Patient)(gridContext.DataItem))?.ResultProgressPercentage ?? 0)" />
                        </div>
                    </CellDisplayTemplate>
                </DxGridDataColumn>

                <DxGridCommandColumn Width="30px" NewButtonVisible="false">
                    <CellDisplayTemplate Context="gridContext">
                        <div class="grid-cell-align-center">
                            <DxButton IconCssClass="grid-toolbar-delete"
                            RenderStyle="ButtonRenderStyle.Link"
                            aria-label="Delete"
                            Click="@(() => patientsGrid.ShowRowDeleteConfirmation(gridContext.VisibleIndex))">
                            </DxButton>
                        </div>
                    </CellDisplayTemplate>
                    <CellEditTemplate Context="editContext">
                        <div class="grid-cell-align-center">
                            <DxButton Enabled="false"
                            aria-label="Delete"
                            CssClass="grid-disabled-button"
                            IconCssClass="grid-toolbar-delete"
                            RenderStyle="ButtonRenderStyle.Link" />
                        </div>
                    </CellEditTemplate>
                </DxGridCommandColumn>
            </Columns>

            <EditFormTemplate Context="editFormContext">
                <DxFormLayout>
                    <div style="display: flex; align-items: center; width: 93%">
                        <DxFormLayoutItem Caption="Kód pacienta:" ColSpanMd="12">
                            @editFormContext.GetEditor("PatientCode")
                        </DxFormLayoutItem>
                        <div style=" margin-top: 4px; margin-left: 2px;">
                            <DxButton CssClass="info-icon-btn" Click="() => IsInfoOpen = !IsInfoOpen" IconCssClass="grid-toolbar-info" RenderStyle="ButtonRenderStyle.None" />
                        </div>
                        <DxFlyout @bind-IsOpen="@IsInfoOpen"
                        PositionTarget=".info-icon-btn"
                        Position="FlyoutPosition.Bottom"
                        PreventCloseOnPositionTargetClick="true"
                        Width="240">
                            Údaje o všetkých pacientoch budú anonymizované. Jednotliví pacienti budú figurovať pod všeobecným <b>označením miesta centra</b> (ZV – Zvolen, MT– Martin, BAR – Bratislava Ružinov, BAK – Bratislava Kramáre, TT – Trnava, NR – Nitra, RK – Ružomberok, BJ – Bardejov, KE – Košice, GA– Galanta) a <b>poradového čísla pacienta</b> v danom centre, <span style="color:cornflowerblue">napríklad ZV01, ZV02 a pod </span>
                        </DxFlyout>
                    </div>
                    @if (isAdminOrOffice)
                    {
                        <DxFormLayoutItem Caption="Pre lekára:" ColSpanMd="12">
                            <DxComboBox Data="@Doctors" TextFieldName="FullName" ValueFieldName="Id" @bind-Value="selectedDoctorId" />
                        </DxFormLayoutItem>
                    }
                    <DxFormLayoutItem ColSpanMd="12">
                        <ValidationSummary />
                    </DxFormLayoutItem>
                </DxFormLayout>
            </EditFormTemplate>

            <CustomValidators>
                <MyCustomValidator DataItemValidating="ValidateGridData" />
            </CustomValidators>
        </DxGrid>
    </div>


    <div style="width: 45%" class="accestable first-div" >
        <div class="mo-caption-styleH3">
            Vybraný pacient
        </div>
        <div class="simple-table" style=" border: 1px solid black; border-color: #dfdfdf; border-bottom: none; padding: 10px;">
            <div style="border-bottom: 1px solid black; border-color: black; font-weight: initial; margin-bottom: 6px;">
                Pacient č.  <span style="color:#b691bc; font-weight: bold;">@selectedPatientCode</span>

            </div>
            <div>
                <EditForm Model="@selectedPatient"
                Context="EditFormContext">
                    <DxFormLayout CssClass="w-100">
                        <DxFormLayoutGroup Caption="Povolenia">
                            <div style=" margin-top: 2px; margin-left: 2px;">
                                <span style="font-weight: 700; color: red; margin-left: 5px; white-space: normal;">Na účasť pacienta v štúdii je potrebné mať podpísané súhlasy v papierovej forme. Zaškrtnutím políčok potvrdíte, že súhlasy pacientov máte k dispozícii. Po označení oboch políčok sa vám sprístupnia dotazníky pre konkrétneho pacienta.</span>
                            </div>
                            <DxStackLayout CssClass="w-100" Orientation="@Orientation.Vertical">
                                <Items>
                                    <DxStackLayoutItem>
                                        <Template>
                                            <DxFormLayoutItem Caption="Má pacient podpísaný informovaný súhlas so štúdiou?" CaptionCssClass="item-caption-style">
                                                <DxCheckBox @bind-Checked="selectedPatient.InfoConfirmation"
                                                Text="áno"
                                                ReadOnly="@isReadOnly"
                                                @onchange="@(async (args) => await OnCheckBoxChanged(args, nameof(selectedPatient.InfoConfirmation)))" />
                                            </DxFormLayoutItem>
                                        </Template>
                                    </DxStackLayoutItem>
                                    <DxStackLayoutItem>
                                        <Template>
                                            <DxFormLayoutItem Caption="Má pacient podpísaný Formulár súhlasu s nariadením GDPR?" CaptionCssClass="item-caption-style">
                                                <DxCheckBox @bind-Checked="selectedPatient.GDPRConfirmation" Text="áno"
                                                ReadOnly="@isReadOnly"
                                                @onchange="@(async (args) => await OnCheckBoxChanged(args, nameof(selectedPatient.GDPRConfirmation)))" /> 
                                            </DxFormLayoutItem>
                                        </Template>
                                    </DxStackLayoutItem>
                                </Items>
                            </DxStackLayout>
                        </DxFormLayoutGroup>
                    </DxFormLayout>
                </EditForm>
            </div>
            <div style="border-bottom: 1px solid black; border-color: black; font-weight: initial; margin-bottom: 6px;">
                Udalosti
            </div>
            <div class="simple-table" style="border: 1px solid black; border-color: #dfdfdf; border-bottom: none; padding: 10px;">
                @if (selectedPatient.GDPRConfirmation && selectedPatient.InfoConfirmation)
                {
                    @if (hasQuestionnaires)
                    {
                        @foreach (var questionnaire in Questionnaires)
                        {
                            <div style="margin-bottom: 6px;">
                                <DxMenu Orientation="@Orientation.Horizontal">
                                    <Items>
                                        <div style="display: flex; align-items: center;">
                                            <DxMenuItem NavigateUrl="@GetNavigateUrl(questionnaire.Order, questionnaire.Id)"
                                            Text="@GetMenuText(questionnaire.Order)"
                                            @onclick="() => SetCurrentId(questionnaire.Id)" />
                                            <Krka.MoveOn.Components.Pages.Components.ProgressBar ProgressPercentage="@(((Data.Questionnaires.Questionnaire)(questionnaire))?.ProgressPercentage ?? 0)" />
                                        </div>
                                    </Items>
                                </DxMenu Orientation="@Orientation.Horizontal">

                            </div>
                        }
                    }
                    else
                    {
                        <p style="color: red">Žiadne dotazníky nie sú k dispozícii pre tohto pacienta.</p>
                    }
                }
            </div>

            @code {
                // Zachytenie aktualnej Questionnaire_id
                private async Task SetCurrentId(string id)
                {
                    await SessionStorage.SetAsync("currentId", id);
                }

                private string GetNavigateUrl(Data.Questionnaires.Questionnaire.QuestionnaireOrderEnum order, string id)
                {
                    return order switch
                    {
                        Data.Questionnaires.Questionnaire.QuestionnaireOrderEnum.entry => $"/entryQ/gen/{id}",
                        Data.Questionnaires.Questionnaire.QuestionnaireOrderEnum.ongoing => $"/ongoingQ/init/{id}",
                        Data.Questionnaires.Questionnaire.QuestionnaireOrderEnum.result => $"/resultQ/init/{id}",
                        _ => "/"
                    };
                }

                private string GetMenuText(Data.Questionnaires.Questionnaire.QuestionnaireOrderEnum order)
                {
                    return order switch
                    {
                        Data.Questionnaires.Questionnaire.QuestionnaireOrderEnum.entry => "1. Vstupný klinický dotazník",
                        Data.Questionnaires.Questionnaire.QuestionnaireOrderEnum.ongoing => "2. Priebežný klinický dotazník",
                        Data.Questionnaires.Questionnaire.QuestionnaireOrderEnum.result => "3. Výstupný klinický dotazník",
                        _ => "Unknown"
                    };
                }
            }


        </div>
    </div>


</div>



@code {
    IGrid patientsGrid { get; set; }
    private List<ApplicationUser> Doctors;
    public List<Data.Patient> Patients { get; set; }
    public List<Data.Questionnaires.Questionnaire> Questionnaires { get; set; }

    private bool isFocusedRowEnabled = false;

    private Data.Patient? selectedPatient1 = null;

    private Data.Patient selectedPatient = new Data.Patient
        {
            UserId = "default",
            PatientCode = "default",
            InfoConfirmation = false,
            GDPRConfirmation = false,
            ModifiedAt = DateTime.Now,
            CreatedAt = DateTime.Now
        };

    private string? selectedDoctorId;
    private string? selectedPatientCode;

    private int? selectedPatientId;
    private bool hasQuestionnaires;
    private bool isRendered = false;
    private bool IsInfoOpen = true;
    private bool IsInfoOpen1 = true;
    private bool isAdminOrOffice;
    private ValidationMessageStore messageStore;



    bool isReadOnly = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;


        isAdminOrOffice = user.IsInRole("Admin") || user.IsInRole("Office");

        if (user.IsInRole("Office"))
        {
            isReadOnly = true;
        }

        Patients = await PatientService.GetPatientsAsync();
        Doctors = await PatientService.GetDoctorsAsync();

        Logger.LogInformation("Stranka patients bola nacitana");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        isRendered = true;
        var selectedPatientId = await GetSelectedPatientId();

        if (selectedPatientId.HasValue)
        {
            var selectedPatient = Patients.FirstOrDefault(p => p.Id == selectedPatientId.Value);
            if (selectedPatient != null)
            {
                //patientsGrid.SetFocusedRowIndex(Patients.IndexOf(selectedPatient));
                await patientsGrid.SetFocusedDataItemAsync(selectedPatient);
            }
        }

        var selectedPatientCode = await GetSelectedPatientCode();
        if (!string.IsNullOrEmpty(selectedPatientCode))
        {
            this.selectedPatientCode = selectedPatientCode;
        }
    }

    private async Task SetSelectedPatientId(int PatientId)
    {
        if (isRendered)
        {
            await SessionStorage.SetAsync("selectedPatientId", PatientId);
        }
    }

    private async Task SetSelectedPatientCode(string? patientCode)
    {
        if (isRendered && !string.IsNullOrEmpty(patientCode))
        {
            await SessionStorage.SetAsync("selectedPatientCode", patientCode);
        }
    }

    private async Task<int?> GetSelectedPatientId()
    {
        var result = await SessionStorage.GetAsync<int?>("selectedPatientId");
        return result.Success ? result.Value : null;
    }

    private async Task<string?> GetSelectedPatientCode()
    {
        var result = await SessionStorage.GetAsync<string>("selectedPatientCode");
        return result.Success ? result.Value : null;
    }

    // Nacitanie Id aktualneho pouzivatela
    async Task<string> GetCurrentUserIdAsync()
    {
        var user = await UserManager.GetUserAsync(SignInManager.Context.User);
        if (user != null)
        {
            return user.Id;
        }
        return null;
    }

    // Notifikacie
    private void DeleteToast()
    {
        ToastService.ShowToast(new ToastOptions
            {
                ProviderName = "Overview",
                Title = "Pacient bol úspešne odstránený",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Success,
            });
    }
    private void AddToast()
    {
        ToastService.ShowToast(new ToastOptions
            {
                ProviderName = "Overview",
                Title = "Pacient bol úspešne pridaný",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Success,
            });
    }
    private void MaxCapacityToast()
    {
        var doctor = Doctors.FirstOrDefault(d => d.Id == selectedDoctorId);
        var doctorFullName = doctor != null ? doctor.FullName : " ";
        ToastService.ShowToast(new ToastOptions
            {
                ProviderName = "Overview",
                Title = $"Dosiahli ste maximálnu kapacitu pacientov (20) pre lekára {doctorFullName?.ToUpper()}",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Danger,
            });
    }
    private void AppoveSuccessToast()
    {
        ToastService.ShowToast(new ToastOptions
            {
                ProviderName = "Overview",
                Title = "Povolenie bolo udelené",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Success,
            });
    }
    private void AppoveCancelToast()
    {
        ToastService.ShowToast(new ToastOptions
            {
                ProviderName = "Overview",
                Title = "Povolenie bolo zrušené",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Warning,
            });
    }

    //Reload Grid
    async Task UpdateDataAsync()
    {
        Patients = await PatientService.GetPatientsAsync();
        patientsGrid.Reload();
    }

    // Otvorenie editForm
    async Task New_Click()
    {
        await patientsGrid.StartEditNewRowAsync();
        Logger.LogInformation("Clik na pridat pacienta");

    }

    // Nastavenie objektov
    async Task Grid_CustomizeEditModel_New(GridCustomizeEditModelEventArgs e)
    {
        if (e.IsNew)
        {
            var newPatient = (Data.Patient)e.EditModel;
            newPatient.UserId = await GetCurrentUserIdAsync();
            newPatient.CreatedAt = DateTime.Now;
            newPatient.ModifiedAt = DateTime.Now;
        }
    }

    void Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (e.IsNew)
        {
            var newPatient = (Data.Patient)e.EditModel;
            newPatient.PatientCode = "newCode";
            newPatient.CreatedAt = DateTime.Now;
        }
    }

    // Ulozenie do DB
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        var patient = (Data.Patient)e.EditModel;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (e.IsNew)
        {
            if (user.IsInRole("Doctor"))
            {
                patient.UserId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            }
            else if (user.IsInRole("Admin"))
            {
                patient.UserId = selectedDoctorId; // selectedDoctorId from the combobox
            }

            var result = await PatientService.SavePatientAsync(patient);
            if (!result.Success)
            {
                e.Cancel = true;
                var context = patientsGrid.GetEditContext();
                messageStore = new(context);
                messageStore.Add(new FieldIdentifier(patient, patient.PatientCode), string.Format("{0} {1}", result.ErrorMessage, result.AdditionalInfo));
                context.NotifyValidationStateChanged();
                return;
            }

            // Vytvorenie 3 sekcii dotazníkov (Vstupny, prebiehajúci, Vystupni)
            var questionnaires = new List<Data.Questionnaires.Questionnaire>
                {
                    new Data.Questionnaires.Questionnaire
                    {
                        PatientId = patient.Id,
                        Date = DateTime.Now,
                        Order = Data.Questionnaires.Questionnaire.QuestionnaireOrderEnum.entry,
                        CreatedAt = DateTime.Now,
                        ModifiedAt = DateTime.Now
                    },
                    new Data.Questionnaires.Questionnaire
                    {
                        PatientId = patient.Id,
                        Date = DateTime.Now,
                        Order = Data.Questionnaires.Questionnaire.QuestionnaireOrderEnum.ongoing,
                        CreatedAt = DateTime.Now,
                        ModifiedAt = DateTime.Now
                    },
                    new Data.Questionnaires.Questionnaire
                    {
                        PatientId = patient.Id,
                        Date = DateTime.Now,
                        Order = Data.Questionnaires.Questionnaire.QuestionnaireOrderEnum.result,
                        CreatedAt = DateTime.Now,
                        ModifiedAt = DateTime.Now
                    }
                };

            foreach (var questionnaire in questionnaires)
            {
                await QuestionnaireService.SaveQuestionnaireAsync(questionnaire);
            }
            AddToast();
        }
        else
        {
            if (user.IsInRole("Admin"))
            {
                patient.UserId = selectedDoctorId; // Update UserId if Admin changes it
            }

            await PatientService.SavePatientAsync(patient);
        }

        await UpdateDataAsync();
    }

    // Nastavenie objektu "DeletedAt"
    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        var patient = (Data.Patient)e.DataItem;
        await PatientService.DeletePatientAsync(patient.Id);
        await UpdateDataAsync();
        DeleteToast();
    }

    private async Task OnCheckBoxChanged(ChangeEventArgs args, string propertyName)
    {
        bool isChecked = (bool)args.Value;

        if (propertyName == nameof(selectedPatient.InfoConfirmation))
        {
            selectedPatient.InfoConfirmation = isChecked;
        }
        else if (propertyName == nameof(selectedPatient.GDPRConfirmation))
        {
            selectedPatient.GDPRConfirmation = isChecked;
        }

        await SaveData(isChecked, propertyName);
    }

    private async Task SaveData(bool isChecked, string propertyName)
    {
        await HandleConfirmationSubmit();

        if (isChecked)
        {
            AppoveSuccessToast();
        }
        else
        {
            AppoveCancelToast();
        }
    }

    async Task HandleConfirmationSubmit()
    {
        if (selectedPatient.UserId != "default")
        {
            await PatientService.SavePatientAsync(selectedPatient);
            await UpdateDataAsync();
        }
    }

    // Nacitanie dotaznikov podla daneho pacienta
    private async Task LoadQuestionnairesAsync(int patientId)
    {
        var questionnaires = await QuestionnaireService.GetQuestionnairesByPatientIdAsync(patientId);
        hasQuestionnaires = questionnaires.Any(); // ak obsahuje polozky
        Questionnaires = hasQuestionnaires ? questionnaires : new List<Data.Questionnaires.Questionnaire>();
        patientsGrid.Reload();
        StateHasChanged();
    }

    //Zmena focusnuteho riadku
    private async void OnFocusedRowChanged(GridFocusedRowChangedEventArgs e)
    {
        var patient = e.DataItem as Data.Patient;
        if (e.DataItem is Data.Patient patient1)
        {
            selectedPatient = patient1;
        }
        selectedPatientCode = patient?.PatientCode;
        selectedPatientId = patient?.Id;

        if (selectedPatientId.HasValue)
        {
            await LoadQuestionnairesAsync(selectedPatientId.Value);
            await SetSelectedPatientId(selectedPatientId.Value);
        }

        if (!string.IsNullOrEmpty(selectedPatientCode))
        {
            await SetSelectedPatientCode(selectedPatientCode);
        }

        StateHasChanged();
    }

    private void ValidateGridData(ValidationMessageStoreEventArgs e)
    {
        var patient = (Data.Patient)e.EditModel;
        messageStore?.Clear();

        // code validation
        if (string.IsNullOrEmpty(patient.PatientCode) || !Regex.IsMatch(patient.PatientCode, "^(ZV|MT|BAR|BAK|TT|NR|RK|BJ|KE|GA)\\d{2}$"))
            e.AddError(nameof(patient.PatientCode), "Neplatný formát kódu pacienta. Použite napríklad ZV19, MT11 a pod");

        // doctor validation
        var authState = AuthenticationStateProvider.GetAuthenticationStateAsync().Result;
        var user = authState.User;
        if (user.IsInRole("Admin"))
        {
            if (string.IsNullOrEmpty(selectedDoctorId))
                e.AddError(nameof(patient.UserId), "Výber lekára je povinný.");
        }
    }

    void Grid_CustomizeElement(GridCustomizeElementEventArgs e)
    {
        if (e.ElementType == GridElementType.DataRow)
        {
            var patient = Patients[e.VisibleIndex];
            if (patient.Valid == Data.Patient.ValidEnum.Predčasne_vylúčený)
            {
                e.Style = "background-color: #f0f0f0; color: black;";
            }
        }
        if (e.ElementType == GridElementType.HeaderCell)
        {
            e.Style = "background-color: rgba(0, 0, 0, 0.08); font-weight: bold;";
        }
    }
}