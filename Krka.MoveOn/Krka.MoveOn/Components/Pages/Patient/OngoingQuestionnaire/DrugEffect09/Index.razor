@page "/ongoingQ/drugEffect/{questionnaireId:guid}"

@using Krka.MoveOn.Data.Questionnaires
@using Krka.MoveOn.Services
@using Krka.MoveOn.Services.Questionnaires
@using Krka.MoveOn.Components.Pages.Patient.OngoingQuestionnaire.Components
@using Krka.MoveOn.Components.Pages.Components
@using Krka.MoveOn.Components.Pages.Patient.Components
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]
@attribute [StreamRendering(true)]
@rendermode InteractiveServer

@inject DrugEffect09Service DrugEffectService
@inject IToastNotificationService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject QuestionnaireProgressService QuestionnaireProgressService



<PageTitle>MoveOn - Detekcia pacientov s príznakmi Parkinsonovej choroby a jej ďalší manažment </PageTitle>

<div class="d-flex align-items-center custom-toast-background">
    <DxToastProvider Name="Overview"
                     MaxToastCount="3"
                     AnimationType="ToastAnimationType.Slide"
                     HorizontalAlignment="HorizontalAlignment.Right"
                     VerticalAlignment="VerticalEdge.Top"
                     Width="320px" />
</div>

<div class="cw-880 mo-main-layout">
    <_OngoingBtn />
    <QuestionnaireProgressBar questionnaireId="@QuestionnaireIdAsString" @ref="QuestionnaireProgressBarRef" />

    <DrugEffect09Table questionnaireId="@QuestionnaireIdAsString" OnSave="HandleTableSaved" />
</div>




@code {
    [Parameter]
    public Guid questionnaireId { get; set; }

    public string QuestionnaireIdAsString => questionnaireId.ToString(); 

    IGrid drugEffectGrid { get; set; }
    public List<Data.Questionnaires.QuestionnaireDrugEffect09> DrugEffects { get; set; }

    List<Data.Dials.DialActiveIngredient> dialActiveIngredient = new();
    List<Data.Dials.DialActiveIngredient> treat_1_Answer = new();

    // List<Data.Dials.DialIndication> dialIndication = new();
    // List<Data.Dials.DialIndication> treat_3_Answer = new();

    

    Dictionary<QuestionnaireDrugEffect09, DataChange> UnsavedChanges { get; } = new();
    bool BatchItemsEnabled => UnsavedChanges.Count > 0 || drugEffectGrid.IsEditing();
    bool isReadOnly = false;

    private QuestionnaireProgressBar QuestionnaireProgressBarRef;

    private async Task HandleTableSaved((int PreviousProgress, int CurrentProgress) progressData)
    {
        if (QuestionnaireProgressBarRef != null)
        {
            await QuestionnaireProgressService.UpdateProgressAsync(QuestionnaireIdAsString);
            await QuestionnaireProgressBarRef.RefreshDataAsync(progressData.PreviousProgress, progressData.CurrentProgress);
        }
    }


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.IsInRole("Office"))
        {
            isReadOnly = true;
        }

        DrugEffects = await DrugEffectService.GetQuestionnaireDrugEffect09(QuestionnaireIdAsString);

        dialActiveIngredient = await DrugEffectService.GetDialActiveIngredientAsync();
        treat_1_Answer = dialActiveIngredient.Where(d => d.Type_q == 1).ToList();

        // dialIndication = await TreatmentService.GetDialIndicationAsync();
        // treat_3_Answer = dialIndication.Where(d => d.Type_q == 1).ToList();

    }

    /// <summary>
    /// Notifikacia
    /// </summary>
    private void AddToast()
    {
        ToastService.ShowToast(new ToastOptions
            {
                ProviderName = "Overview",
                Title = "Učinná látka bola pridaná",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Success,
            });
    }

    /// <summary>
    /// Notifikacia
    /// </summary>
    private void ModifyToast()
    {
        ToastService.ShowToast(new ToastOptions
            {
                ProviderName = "Overview",
                Title = "Učinná látka bola zmenená",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Success,
            });
    }


    /// <summary>
    /// Notifikacia
    /// </summary>
    private void DeleteToast()
    {
        ToastService.ShowToast(new ToastOptions
            {
                ProviderName = "Overview",
                Title = "Učinná látka bola odstránená",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Success,
            });
    }

    async Task UpdateDataAsync()
    {
        DrugEffects = await DrugEffectService.GetQuestionnaireDrugEffect09(QuestionnaireIdAsString);
        drugEffectGrid.Reload();
    }

    async Task New_Click() => await drugEffectGrid.StartEditNewRowAsync();

    async Task Cancel_Click() => await ClearUnsavedChangesAsync();

    async Task Save_Click()
    {
        foreach (var unsavedChange in UnsavedChanges)
        {
            var changedItem = unsavedChange.Key;
            var changeType = unsavedChange.Value.Type;
            switch (changeType)
            {
                case DataChangeType.Addition:
                    await DrugEffectService.SaveDrugEffectAsync(changedItem);
                    AddToast();
                    break;
                case DataChangeType.Modification:
                    await DrugEffectService.SaveDrugEffectAsync(changedItem);
                    ModifyToast();
                    break;
            }
        }
        await ClearUnsavedChangesAsync();
    }

    async Task ClearUnsavedChangesAsync()
    {
        UnsavedChanges.Clear();
        await UpdateDataAsync();
    }

    void Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        var drugEffect = (Data.Questionnaires.QuestionnaireDrugEffect09)e.EditModel;
        var dataItem = (Data.Questionnaires.QuestionnaireDrugEffect09)e.DataItem;
        drugEffect.Questionnaire_id = QuestionnaireIdAsString;
        if (e.IsNew)
        {
            DrugEffects.Add(drugEffect);
            UnsavedChanges[drugEffect] = new(DataChangeType.Addition, new());
        }
        else
        {
            UnsavedChanges[drugEffect] = new(DataChangeType.Modification, new());
        }
    }

    /// <summary>
    /// Nastavenie objektu "DeletedAt"
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    // async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    // {
    //     var treat = (Data.Questionnaires.QuestionnaireDrugEffect09)e.DataItem;
    //     await DrugEffectService.DeleteTreatAsync(treat.Id);
    //     await UpdateDataAsync();
    //     DeleteToast();
    // }

    record DataChange(DataChangeType Type, HashSet<string> ChangedFields);
    enum DataChangeType { Modification, Addition, Delete }
}