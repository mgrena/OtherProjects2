@page "/ongoingQ/init/{questionnaireId:int}"
@using DevExpress.Blazor.Internal
@using Krka.MoveOn.Data.Questionnaires
@using Krka.MoveOn.Services.Questionnaires


@attribute [StreamRendering(true)]
@rendermode InteractiveServer

@inject Initial02Service InitialService
@inject QuestionnaireService QuestionnaireService
@inject IToastNotificationService ToastService

<PageTitle>MoveOn - Detekcia pacientov s príznakmi Parkinsonovej choroby a jej ďalší manažment </PageTitle>


<div class="d-flex align-items-center custom-toast-background">
    <DxToastProvider Name="Overview"
                     MaxToastCount="3"
                     AnimationType="ToastAnimationType.Slide"
                     HorizontalAlignment="HorizontalAlignment.Right"
                     VerticalAlignment="VerticalEdge.Top"
                     Width="320px" />
</div>

<div class="cw-880" style="width: 70%; margin: 0 auto;">
    <_EntryBtn />

    <EditForm Model="@questionnaire"
            Context="EditFormContext"
            OnValidSubmit="@HandleValidSubmit"
            >

        <DataAnnotationsValidator />
        <DxFormLayout>
            <DxFormLayoutGroup Caption="MoveOn - Detekcia pacientov s príznakmi Parkinsonovej choroby a jej ďalší manažment" ColSpanMd="12" CaptionCssClass="caption-styleH0">

                <DxFormLayoutItem Caption="Dátum" ColSpanMd="6" CaptionPosition="CaptionPosition.Vertical" CaptionCssClass="caption-styleH1">

                    <DxDateEdit @bind-Date="@questionnaire.Date" ShowValidationIcon="true" required />
                
    @*                 <ValidationMessage For="@(() => questionnaire.Date)" /> *@

                </DxFormLayoutItem>
                <DxFormLayoutItem ColSpanMd="12">
                    <div style="margin-top: 5px">

                        <DxButton SubmitFormOnClick="true"
                                    Text="Uložiť"
                                    RenderStyle="ButtonRenderStyle.Primary" />
                    </div>
                </DxFormLayoutItem>
            </DxFormLayoutGroup>
        </DxFormLayout>

    </EditForm>


    <DxGrid @ref="initGrid"
            Data="Inits"
            PageSize="20"
            PagerPosition="GridPagerPosition.Bottom"
            PageSizeSelectorVisible="true"
            PageSizeSelectorItems="@(new int[] { 10, 20, 100 })"
            PageSizeSelectorAllRowsItemVisible="true"
            PagerSwitchToInputBoxButtonCount="10"
            PagerVisibleNumericButtonCount="10"
            KeyFieldName="Id"
            ValidationEnabled="false"
            EditMode="GridEditMode.EditCell"
            FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
            ColumnResizeMode="GridColumnResizeMode.NextColumn"
            TextWrapEnabled="false"
            EditModelSaving="Grid_EditModelSaving"
            DataItemDeleting="Grid_DataItemDeleting"
            HighlightRowOnHover="true"           
            FocusedRowEnabled="true" >

        <ToolbarTemplate Context="toolbarContext">
            <DxToolbar ItemRenderStyleMode="ToolbarRenderStyleMode.Plain">

                <DxToolbarItem Text="Pridať učinnú látku" Click="New_Click" Enabled="true">
                    <img src="images/pill.svg" width="24" height="24" alt="Pridať učinnu látku" />
                    <span style="margin-left: 2px">Pridať učinnú látku</span>
                </DxToolbarItem>

                <DxToolbarItem Text="Uložiť" BeginGroup="true" Enabled="BatchItemsEnabled" Click="Save_Click">
                    <img src="images/save.svg" width="24" height="24" alt="Save" />
                    <span style="margin-left: 3px">Uložiť</span>
                </DxToolbarItem>

                <DxToolbarItem Text="Zrušiť" Click="Cancel_Click" Enabled="BatchItemsEnabled">
                    <img src="images/cancel.svg" width="24" height="24" alt="Cancel" />
                    <span style="margin-left: 4px">Zrušiť</span>
                </DxToolbarItem>
            </DxToolbar>
        </ToolbarTemplate>

        <Columns>
            <DxGridDataColumn FieldName="Init_1" Caption="Učinná látka">
                <EditSettings>
                    <DxComboBoxSettings Data="@init_1_Answer" ValueFieldName="Id" TextFieldName="Name" />
                </EditSettings>
            </DxGridDataColumn>

            <DxGridDataColumn FieldName="Init_2" Caption="Dávka (mg)" />

            <DxGridDataColumn FieldName="Init_3" Caption="Počet dávok denne" />

            <DxGridDataColumn Caption="Denná dávka" ReadOnly="true" >
                <CellDisplayTemplate Context="gridContext" >
                    @{
                        if (gridContext.DataItem is Data.Questionnaires.QuestionnaireInitial02 dataItem)
                        {
                            decimal init2 = dataItem.Init_2 != null ? dataItem.Init_2 : 0m;
                            int init3 = dataItem.Init_3 ?? 0;
                            var calculatedValue = init2 * init3;
                            @calculatedValue
                        }
                        else
                        {
                            @:0
                        }
                    }
                </CellDisplayTemplate>
            </DxGridDataColumn>

            <DxGridCommandColumn Width="30px" NewButtonVisible="false">

                <CellDisplayTemplate Context="gridContext">
                    <div class="grid-cell-align-center">
                        <DxButton IconCssClass="grid-icon grid-icon-delete"
                                  RenderStyle="ButtonRenderStyle.Link"
                                  aria-label="Delete"
                                  Click="@(() => initGrid.ShowRowDeleteConfirmation(gridContext.VisibleIndex))">
                            <img src="images/delete.svg" width="16" height="16" alt="Vymazať" />
                        </DxButton>
                    </div>
                </CellDisplayTemplate>

                <CellEditTemplate Context="editContext">
                    <div class="grid-cell-align-center">
                        <DxButton Enabled="false"
                                  aria-label="Delete"
                                  CssClass="grid-disabled-button"
                                  IconCssClass="grid-icon grid-icon-delete"
                                  RenderStyle="ButtonRenderStyle.Link" />

                    </div>
                </CellEditTemplate>
            </DxGridCommandColumn>
        </Columns>

        <TotalSummary>
            <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" FieldName="Init_2" ValueDisplayFormat=" {0}" />
            <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" FieldName="Init_3" ValueDisplayFormat=" {0}" />
        </TotalSummary>

        <EditFormTemplate Context="editFormContext">
            <DxFormLayout>
                <DxFormLayoutItem Caption="Identifikačný kód pacienta">
                    @editFormContext.GetEditor("Init_1")
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditFormTemplate>
    </DxGrid>
</div>


@code {
    [Parameter]
    public int questionnaireId { get; set; }

    IGrid initGrid { get; set; }
    public List<Data.Questionnaires.QuestionnaireInitial02> Inits { get; set; }

    Questionnaire questionnaire = new Questionnaire
        {
            Date = DateTime.Now,
            PatientId = 0,
            Order = 0,
            ModifiedAt = DateTime.Now,
            CreatedAt = DateTime.Now
        };
    List<Data.Dials.DialActiveIngredient> dialActiveIngredient = new();
    List<Data.Dials.DialActiveIngredient> init_1_Answer = new();

    Dictionary<QuestionnaireInitial02, DataChange> UnsavedChanges { get; } = new();
    bool BatchItemsEnabled => UnsavedChanges.Count > 0 || initGrid.IsEditing();

    protected override async Task OnInitializedAsync()
    {
        Inits = await InitialService.GetQuestionnaireInitial02(questionnaireId);

        dialActiveIngredient = await InitialService.GetDialActiveIngredientAsync();
        init_1_Answer = dialActiveIngredient.Where(d => d.Type_q == 1).ToList();
        questionnaire = await QuestionnaireService.GetQuestionnairesByIdAsync(questionnaireId);
    }


    private async Task HandleValidSubmit()
    {
        await QuestionnaireService.UpdateQuestionnaireAsync(questionnaire);
        ModifyToast();
    }

    /// <summary>
    /// Notifikacia
    /// </summary>
    private void AddToast()
    {
        ToastService.ShowToast(new ToastOptions
        {
            ProviderName = "Overview",
            Title = "Učinná látka bola pridaná",
            ThemeMode = ToastThemeMode.Saturated,
            RenderStyle = ToastRenderStyle.Success,
        });
    }

    /// <summary>
    /// Notifikacia
    /// </summary>
    private void ModifyToast()
    {
        ToastService.ShowToast(new ToastOptions
            {
                ProviderName = "Overview",
                Title = "Učinná látka bola zmenená",
                ThemeMode = ToastThemeMode.Saturated,
                RenderStyle = ToastRenderStyle.Success,
            });
    }

    /// <summary>
    /// Notifikacia
    /// </summary>
    private void DeleteToast()
    {
        ToastService.ShowToast(new ToastOptions
        {
            ProviderName = "Overview",
            Title = "Učinná látka bola odstránená",
            ThemeMode = ToastThemeMode.Saturated,
            RenderStyle = ToastRenderStyle.Success,
        });
    }



    async Task UpdateDataAsync()
    {
        Inits = await InitialService.GetQuestionnaireInitial02(questionnaireId);
        initGrid.Reload();
    }



    async Task New_Click() => await initGrid.StartEditNewRowAsync();


    async Task Cancel_Click() => await ClearUnsavedChangesAsync();

    async Task Save_Click()
    {
        foreach (var unsavedChange in UnsavedChanges)
        {
            var changedItem = unsavedChange.Key;
            var changeType = unsavedChange.Value.Type;            
            switch (changeType)
            {
                case DataChangeType.Addition:
                    await InitialService.SaveInitialAsync(changedItem);
                    AddToast();
                    break;
                case DataChangeType.Modification:
                    await InitialService.SaveInitialAsync(changedItem);
                    ModifyToast();
                    break;
            }
        }
        await ClearUnsavedChangesAsync();
    }

    async Task ClearUnsavedChangesAsync()
    {
        UnsavedChanges.Clear();
        await UpdateDataAsync();
    }

    void Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        var init = (Data.Questionnaires.QuestionnaireInitial02)e.EditModel;
        var dataItem = (Data.Questionnaires.QuestionnaireInitial02)e.DataItem;
        init.Questionnaire_id = questionnaireId;
        if (e.IsNew)
        {
            Inits.Add(init);
            UnsavedChanges[init] = new(DataChangeType.Addition, new());
        }  
        else
        {
            UnsavedChanges[init] = new(DataChangeType.Modification, new());
        }
    }

    /// <summary>
    /// Nastavenie objektu "DeletedAt"
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        var init = (Data.Questionnaires.QuestionnaireInitial02)e.DataItem;
        await InitialService.DeleteInitAsync(init.Id);
        await UpdateDataAsync();
        DeleteToast();
    }

    record DataChange(DataChangeType Type, HashSet<string> ChangedFields);
    enum DataChangeType { Modification, Addition, Delete }
}