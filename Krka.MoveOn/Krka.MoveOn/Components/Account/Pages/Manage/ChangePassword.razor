@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Krka.MoveOn.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger

<PageTitle>Zmena hesla</PageTitle>
<div class="block-content">
    <StatusMessage Message="@message" />
    <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post" Context="changepassword">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />
        <DxFormLayout CaptionPosition=@CaptionPosition.Vertical>
            <DxFormLayoutItem Caption="Staré heslo" ColSpanMd="12" BeginRow="true">
                <InteractiveServerTextBox Name="Input.OldPassword" Value="@Input.OldPassword" Password="true" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Nové heslo" ColSpanMd="12" BeginRow="true">
                <InteractiveServerTextBox Name="Input.NewPassword" Value="@Input.NewPassword" Password="true" />
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Potvrďte heslo" ColSpanMd="12" BeginRow="true">
                <InteractiveServerTextBox Name="Input.ConfirmPassword" Value="@Input.ConfirmPassword" Password="true" />
            </DxFormLayoutItem>
            <DxFormLayoutItem ColSpanMd="12" BeginRow="true">
                <DxButton CssClass="w-100" SubmitFormOnClick="true" Text="Zmeniť heslo"></DxButton>
            </DxFormLayoutItem>
        </DxFormLayout>
    </EditForm>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private bool hasPassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        hasPassword = await UserManager.HasPasswordAsync(user);
        if (!hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        Logger.LogInformation("User changed their password successfully.");

        message = "Vaše heslo bolo zmenené";
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Aktuálne heslo")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "Pole {0} musí byť aspoň {2} a maximálne {1} znakov dlhé.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Nové heslo")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Potvrdzovacie heslo")]
        [Compare("NewPassword", ErrorMessage = "Nové heslo a potvrdzovacie heslo sa nezhodujú.")]
        public string ConfirmPassword { get; set; } = "";
    }
}