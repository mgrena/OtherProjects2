@page "/Account/Manage/ResetAuthenticator"

@using Microsoft.AspNetCore.Identity
@using Krka.MoveOn.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ResetAuthenticator> Logger

<PageTitle>Resetovať autentifikačný kľúč</PageTitle>

<StatusMessage />
<div class="title title-secondary">
    <div class="title-content-text-secondary">Resetovať autentifikačný kľúč</div>
</div>
<span>Ak obnovíte svoj overovací kľúč, vaša overovacia aplikácia nebude fungovať, kým ju znova nenakonfigurujete.</span>
<span>
    Tento proces vypne 2FA, kým neoveríte svoju autentifikačnú aplikáciu.
    Ak nedokončíte konfiguráciu aplikácie autentifikátora, môžete stratiť prístup k svojmu účtu.
</span>
<div class="block-content">
    <form @formname="reset-authenticator" @onsubmit="OnSubmitAsync" method="post">
        <AntiforgeryToken />
        <DxButton CssClass="w-100" Text="Resetovať autentifikačný kľúč" RenderStyle="ButtonRenderStyle.Danger" SubmitFormOnClick="true"></DxButton>
    </form>
</div>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private async Task OnSubmitAsync()
    {
        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        await UserManager.SetTwoFactorEnabledAsync(user, false);
        await UserManager.ResetAuthenticatorKeyAsync(user);
        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' has reset their authentication app key.", userId);

        await SignInManager.RefreshSignInAsync(user);

        RedirectManager.RedirectToWithStatus(
            "Account/Manage/EnableAuthenticator",
            "Váš kľúč autentifikačnej aplikácie bol resetovaný, budete musieť nakonfigurovať aplikáciu autentifikácie pomocou nového kľúča.",
            HttpContext);
    }
}