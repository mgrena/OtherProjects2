@page "/Account/Manage/EnableAuthenticator"

@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Krka.MoveOn.Data

@inject UserManager<ApplicationUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject UrlEncoder UrlEncoder
@inject IdentityRedirectManager RedirectManager
@inject ILogger<EnableAuthenticator> Logger

<PageTitle>Konfigurácia autentifikačnej aplikácie</PageTitle>
<PageScript Src="./Components/Account/Pages/Manage/EnableAuthenticator.razor.js" />

@if(recoveryCodes is not null) {
    <ShowRecoveryCodes RecoveryCodes="recoveryCodes.ToArray()" StatusMessage="@message" />
} else {
    <StatusMessage Message="@message" />
    <div class="title title-secondary">
        <div class="title-content-text-secondary">Konfigurácia autentifikačnej aplikácie</div>
    </div>
    <div class="twofactor-content">
        <span>Ak chcete použiť autentifikačnú aplikáciu, vykonajte nasledujúce kroky:</span>
        <ol class="list">
            <li>
                <span>
                    Stiahnite si dvojfaktorovú autentifikačnú aplikáciu, napríklad Microsoft Authenticator pre
                    <a href="https://go.microsoft.com/fwlink/?Linkid=825072">Android</a> a
                    <a href="https://go.microsoft.com/fwlink/?Linkid=825073">iOS</a> alebo
                    Google Authenticator pre
                    <a href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&amp;hl=en">Android</a> a
                    <a href="https://itunes.apple.com/us/app/google-authenticator/id388497605?mt=8">iOS</a>.
                </span>
            </li>
            <li>
                <span>Naskenujte QR kód alebo zadajte tento kľúč <kbd>@sharedKey</kbd> do aplikácie dvojfaktorového autentifikátora. Na medzerách a veľkosti písma nezáleží.</span>
                <div id="qrCode"></div>
                <div id="qrCodeData" data-url="@authenticatorUri"></div>
            </li>
            <li>
                <span>
                    Po naskenovaní QR kódu alebo zadaní vyššie uvedeného kľúča vám bude poskytnutá aplikácia na dvojfaktorovú autentifikáciu
                    s jedinečným kódom. Zadajte kód do potvrdzovacieho poľa nižšie.
                </span>
            </li>
        </ol>
        <div class="block-content">
            <EditForm Model="Input" FormName="send-code" OnValidSubmit="OnValidSubmitAsync" method="post" Context="SendCode">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
                <DxFormLayout CaptionPosition=@CaptionPosition.Vertical>
                    <DxFormLayoutItem Caption="Overovací kód" ColSpanMd="12" BeginRow="true">
                        <InteractiveServerTextBox Name="Input.Code" Value="@Input.Code" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem ColSpanMd="12" BeginRow="true">
                        <DxButton CssClass="w-100" SubmitFormOnClick="true" Text="Overiť"></DxButton>
                    </DxFormLayoutItem>
                </DxFormLayout>
            </EditForm>
        </div>
    </div>
}

@code {
    private const string AuthenticatorUriFormat = "otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6";

    private string? message;
    private ApplicationUser user = default!;
    private string? sharedKey;
    private string? authenticatorUri;
    private IEnumerable<string>? recoveryCodes;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync() {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        await LoadSharedKeyAndQrCodeUriAsync(user);
    }

    private async Task OnValidSubmitAsync() {
        // Strip spaces and hyphens
        var verificationCode = Input.Code.Replace(" ", string.Empty).Replace("-", string.Empty);

        var is2faTokenValid = await UserManager.VerifyTwoFactorTokenAsync(
            user, UserManager.Options.Tokens.AuthenticatorTokenProvider, verificationCode);

        if(!is2faTokenValid) {
            message = "Chyba: Overovací kód je neplatný.";
            return;
        }

        await UserManager.SetTwoFactorEnabledAsync(user, true);
        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("Používateľ s ID '{UserId}' má povolenú 2FA pomocou autentifikačnej aplikácie.", userId);

        message = "Vaša overovacia aplikácia bola overená.";

        if(await UserManager.CountRecoveryCodesAsync(user) == 0) {
            recoveryCodes = await UserManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);
        } else {
            RedirectManager.RedirectToWithStatus("Account/Manage/TwoFactorAuthentication", message, HttpContext);
        }
    }

    private async ValueTask LoadSharedKeyAndQrCodeUriAsync(ApplicationUser user) {
        // Load the authenticator key & QR code URI to display on the form
        var unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        if(string.IsNullOrEmpty(unformattedKey)) {
            await UserManager.ResetAuthenticatorKeyAsync(user);
            unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        }

        sharedKey = FormatKey(unformattedKey!);

        var email = await UserManager.GetEmailAsync(user);
        authenticatorUri = GenerateQrCodeUri(email!, unformattedKey!);
    }

    private string FormatKey(string unformattedKey) {
        var result = new StringBuilder();
        int currentPosition = 0;
        while(currentPosition + 4 < unformattedKey.Length) {
            result.Append(unformattedKey.AsSpan(currentPosition, 4)).Append(' ');
            currentPosition += 4;
        }
        if(currentPosition < unformattedKey.Length) {
            result.Append(unformattedKey.AsSpan(currentPosition));
        }

        return result.ToString().ToLowerInvariant();
    }

    private string GenerateQrCodeUri(string email, string unformattedKey) {
        return string.Format(
            CultureInfo.InvariantCulture,
            AuthenticatorUriFormat,
            UrlEncoder.Encode("Krka MoveOn"),
            UrlEncoder.Encode(email),
            unformattedKey);
    }

    private sealed class InputModel {
        [Required]
        [StringLength(7, ErrorMessage = "Pole {0} musí byť aspoň {2} a maximálne {1} znakov dlhé.", MinimumLength = 6)]
        [DataType(DataType.Text)]
        [Display(Name = "Overovací kód")]
        public string Code { get; set; } = "";
    }
}