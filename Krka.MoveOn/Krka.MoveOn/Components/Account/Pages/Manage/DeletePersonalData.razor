@page "/Account/Manage/DeletePersonalData"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Krka.MoveOn.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<DeletePersonalData> Logger

<PageTitle>Vymazať osobné údaje</PageTitle>

<StatusMessage Message="@message" />
<div class="block-content">
    <div class="title title-secondary">
        <div class="title-content-text-secondary">Vymazať osobné údaje</div>
    </div>
    <div>Odstránením týchto údajov sa natrvalo odstráni váš účet, ktorý nie je možné obnoviť.</div>

    <EditForm Model="Input" FormName="delete-user" OnValidSubmit="OnValidSubmitAsync" method="post" Context="DeleteUser">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />
        <DxFormLayout CaptionPosition=@CaptionPosition.Vertical>
            @if(requirePassword) {
                <DxFormLayoutItem Caption="Heslo" BeginRow="true" ColSpanMd="12">
                    <InteractiveServerTextBox Name="Input.Password" Value="@Input.Password" Password="true"></InteractiveServerTextBox>
                </DxFormLayoutItem>
            }
            <DxFormLayoutItem ColSpanMd="12" BeginRow="true">
                <DxButton CssClass="w-100" SubmitFormOnClick="true" RenderStyle="ButtonRenderStyle.Danger" Text="Delete data and close my account"></DxButton>
            </DxFormLayoutItem>
        </DxFormLayout>
    </EditForm>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private bool requirePassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync() {
        Input ??= new();
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        requirePassword = await UserManager.HasPasswordAsync(user);
    }

    private async Task OnValidSubmitAsync() {
        if(requirePassword && !await UserManager.CheckPasswordAsync(user, Input.Password)) {
            message = "Error: Incorrect password.";
            return;
        }

        var result = await UserManager.DeleteAsync(user);
        if(!result.Succeeded) {
            throw new InvalidOperationException("Unexpected error occurred deleting user.");
        }

        await SignInManager.SignOutAsync();

        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' deleted themselves.", userId);

        RedirectManager.RedirectToCurrentPage();
    }

    private sealed class InputModel {
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
    }
}