@page "/Account/ConfirmEmailRegister"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Krka.MoveOn.Data

@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Potvrdenie e-mail adresy</PageTitle>

<div class="main-content">
    <div class="block-content">
        <div class="title">
            <div class="title-header-text">Vitajte v projekte MoveOn</div>
            <div class="title-content-text">@statusMessage</div>
            <div class="title-content-text">Prosím, zadajte svoje heslo</div>
        </div>
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" FormName="resend-email-confirmation" OnValidSubmit="OnValidSubmitAsync" method="post" Context="resend">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <input type="hidden" name="Input.Code" value="@Input.Code" />
            <DxFormLayout CaptionPosition=@CaptionPosition.Vertical>
                <DxFormLayoutItem Caption="E-mail" ColSpanMd="12" BeginRow="true">
                    <DxTextBox @bind-Text="Input.Email" ReadOnly="true" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Heslo" ColSpanMd="12" BeginRow="true">
                    <DxTextBox ShowValidationIcon="true" @bind-Text="Input.Password" Password="true" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Potvrdenie hesla" ColSpanMd="12" BeginRow="true">
                    <DxTextBox ShowValidationIcon="true" @bind-Text="Input.ConfirmPassword" Password="true" />
                </DxFormLayoutItem>
                <DxFormLayoutItem ColSpanMd="12" BeginRow="true">
                    <DxButton CssClass="w-100" SubmitFormOnClick="true" Text="Nastaviť"></DxButton>
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditForm>
        <div class="links-container">
            <span>Vrátiť sa na <a href="Account/Login">Prihlasovaciu stránku</a>?</span>
        </div>
    </div>
</div>

@code {
    private string? statusMessage;
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    private string? Message => identityErrors is null ? null : $"Chyba: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override async Task OnInitializedAsync() {
        if(UserId is null || Code is null) {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByIdAsync(UserId);
        if(user is null) {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = $"Chyba pri načítavaní používateľa s ID {UserId}";
        } else {
            var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
            var result = await UserManager.ConfirmEmailAsync(user, code);
            statusMessage = result.Succeeded ? "Ďakujeme za potvrdenie vášho e-mailu." : "Chyba pri potvrdení vášho e-mailu.";

            Input.Code = code;
            Input.Email = user!.Email!;
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            // Don't reveal that the user does not exist
            NavigationManager.NavigateTo("Account/ResetPasswordConfirmation");
        }

        var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        var result = await UserManager.ResetPasswordAsync(user!, code, Input.Password);
        if (result.Succeeded)
        {
            NavigationManager.NavigateTo("Account/ResetPasswordConfirmation");
        }

        identityErrors = result.Errors;
    }

    private sealed class InputModel
    {
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "Pole {0} musí byť aspoň {2} a maximálne {1} znakov dlhé.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Potvrďte heslo")]
        [Compare("Password", ErrorMessage = "Heslo a potvrdzovacie heslo sa nezhodujú.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        public string Code { get; set; } = "";
    }
}