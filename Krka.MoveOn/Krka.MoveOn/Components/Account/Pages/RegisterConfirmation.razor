@page "/Account/RegisterConfirmation"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Krka.MoveOn.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register confirmation</PageTitle>

<div class="main-content">
    <div class="block-content">
        <div class="title">
            <div class="title-header-text">Register confirmation</div>
        </div>
        <StatusMessage Message="@statusMessage" />
        @if(emailConfirmationLink is not null) {
            <div>
                Táto aplikácia momentálne nemá zaregistrovaného skutočného odosielateľa e-mailu. Informácie o konfigurácii skutočného odosielateľa e-mailu nájdete v <a href="https://aka.ms/aspaccountconf">týchto dokumentoch</a>.
                Normálne by to bolo odoslané e-mailom.
            </div>
            <div>
                <NavLink href="@emailConfirmationLink" class="button-link confirm-button">
                    <DxButton CssClass="w-100" Text="Potvrďte svoj účet"></DxButton>
                </NavLink>
            </div>
        } else {
            <p>Skontrolujte svoj e-mail a potvrďte svoj účet.</p>
        }
    </div>
</div>

@code {
    private string? emailConfirmationLink;
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync() {
        if(Email is null) {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if(user is null) {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "Error finding user for unspecified email";
        } else if(EmailSender is IdentityNoOpEmailSender) {
            // Once you add a real email sender, you should remove this code that lets you confirm the account
            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            emailConfirmationLink = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });
        }
    }
}